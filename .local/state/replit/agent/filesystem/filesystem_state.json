{"file_contents":{"README.md":{"content":"\n# Compliance Dashboard (Demo)\n\nThis repository contains a demo frontend (React + Vite) and a simple Express backend to simulate:\n- Web scraping (product page)\n- OCR parsing (mocked)\n- Rule engine for Legal Metrology compliance checks\n- A small dashboard UI for seller and backend views\n\n## Run frontend (dev)\n```\ncd frontend\nnpm install\nnpm run dev\n```\n\nOpen the dev server (usually http://localhost:5173).\n\n## Run backend\n```\ncd backend\nnpm install\nnode server.js\n```\n\nThe backend exposes `POST /api/check` to accept multipart form data (`image`) or JSON body `url`.\n\n## Notes\n- Replace mocked OCR logic with Tesseract.js or Google Vision for real OCR.\n- Improve scraping logic per target sites and respect robots.txt.\n- Add persistent DB, auth, and production hardening for real use.\n","size_bytes":787},"replit.md":{"content":"# Compliance Dashboard Application\n\n## Overview\nThis is a compliance dashboard application imported from GitHub that helps with Legal Metrology compliance checks. The application consists of a React/Vite frontend and Express.js backend that supports web scraping, OCR parsing (mocked), and rule engine compliance checking.\n\n## Current State\n- ✅ Successfully imported and configured for Replit environment\n- ✅ Both frontend and backend running successfully\n- ✅ Frontend on port 5000 (user-facing)  \n- ✅ Backend on port 8000 (internal API)\n- ✅ Deployment configuration complete\n- ⚠️ OpenAI API key not configured (AI features disabled)\n\n## Project Architecture\n\n### Frontend (React + Vite)\n- **Location**: `/frontend/`\n- **Port**: 5000 (configured for Replit proxy)\n- **Host**: 0.0.0.0 with allowedHosts: true\n- **Build**: `npm run build` creates production build\n- **Features**: File upload interface, URL input, dashboard UI\n\n### Backend (Express.js)\n- **Location**: `/backend/`  \n- **Port**: 8000 (internal, proxied by frontend)\n- **Host**: localhost\n- **Features**: \n  - Web scraping (Flipkart, Amazon, Myntra, Nykaa support)\n  - File upload handling (images)\n  - OCR processing (mocked)\n  - Compliance rule engine\n  - Rate limiting and security headers\n  - AI-powered analysis (requires OpenAI API key)\n\n## Recent Changes\n- **Date**: September 14, 2025\n- **Changes Made**:\n  - Imported project from GitHub zip file\n  - Installed Node.js 20 and all dependencies  \n  - Modified backend to use localhost instead of 0.0.0.0\n  - Made OpenAI initialization conditional (optional API key)\n  - Created startup script to run both services\n  - Configured workflow for port 5000 web preview\n  - Set up deployment configuration for autoscale\n  - Added comprehensive .gitignore for Node.js projects\n\n## Configuration Files\n\n### Key Files\n- `start-dev.sh`: Development startup script (runs both services)\n- `frontend/vite.config.js`: Frontend configuration with proxy to backend\n- `backend/server.js`: Backend server with API endpoints\n- `.gitignore`: Node.js project exclusions\n\n### Environment Variables (Optional)\n- `OPENAI_API_KEY`: Enables AI-powered compliance explanations and data normalization\n- `NODE_ENV`: Set to 'production' for production deployment\n\n## API Endpoints\n- `GET /health`: Backend health check\n- `POST /api/check`: Main compliance checking endpoint\n  - Accepts: multipart form data (image) or JSON body (url)\n  - Returns: compliance analysis results\n\n## User Preferences\n- Application is ready to use without additional configuration\n- OpenAI features can be enabled by adding API key if needed\n- Frontend uses modern React with Vite for fast development\n\n## Deployment\n- **Target**: Autoscale (stateless web application)\n- **Build**: Frontend builds to `frontend/dist/`\n- **Run**: Both backend and frontend services in production mode\n- **Status**: Ready for deployment","size_bytes":2898},"start-dev.sh":{"content":"#!/bin/bash\n\n# Start backend in background\necho \"Starting backend server...\"\n(cd backend && npm start) &\nBACKEND_PID=$!\n\n# Wait a moment for backend to start\nsleep 3\n\n# Start frontend in foreground\necho \"Starting frontend server...\"\ncd frontend && npm run dev\n\n# If frontend exits, kill backend\nkill $BACKEND_PID 2>/dev/null","size_bytes":324},"backend/ocr-processor.js":{"content":"// ocr-processor.js - Real OCR processing for Legal Metrology compliance\nconst sharp = require('sharp');\nconst Tesseract = require('tesseract.js');\nconst fs = require('fs').promises;\n\n// Legal Metrology field extractors with regex patterns\nconst FIELD_PATTERNS = {\n  // Product name - typically first prominent text or labeled\n  product_name: [\n    /name[:\\s]+([^\\n\\r]+)/gi,\n    /product[:\\s]+([^\\n\\r]+)/gi,\n    /^([A-Za-z\\s&]+(?:cream|lotion|powder|tablet|capsule|soap|oil|shampoo|face|skin|hair|body))/gmi\n  ],\n  \n  // MRP (Maximum Retail Price) - must include price with ₹ or Rs.\n  mrp_inclusive: [\n    /(?:mrp|m\\.r\\.p\\.?|price|cost)[:\\s]*₹?[\\s]*([0-9]+(?:[.,][0-9]+)?)/gi,\n    /₹[\\s]*([0-9]+(?:[.,][0-9]+)?)/g,\n    /rs\\.?[\\s]*([0-9]+(?:[.,][0-9]+)?)/gi,\n    /inr[\\s]*([0-9]+(?:[.,][0-9]+)?)/gi\n  ],\n  \n  // Net quantity - weight, volume, or count\n  net_quantity: [\n    /(?:net[\\s]*qty|net[\\s]*wt|quantity|weight|contents?)[:\\s]*([0-9]+(?:\\.[0-9]+)?[\\s]*(?:g|kg|ml|l|gm|gms|liters?|pieces?|pcs|tablets?|nos?))/gi,\n    /([0-9]+(?:\\.[0-9]+)?[\\s]*(?:g|kg|ml|l|gm|gms|liters?|pieces?|pcs|tablets?|nos?))/gi\n  ],\n  \n  // Manufacturer, packer, or importer details\n  manufacturer_or_importer_name_address: [\n    /(?:mfg\\.?|manufactured[\\s]*by|mfd\\.?[\\s]*by|made[\\s]*by|manufacturer)[:\\s]*([^\\n\\r]+(?:\\n[^\\n\\r]+){0,2})/gi,\n    /(?:packed[\\s]*by|packer|packaged[\\s]*by)[:\\s]*([^\\n\\r]+(?:\\n[^\\n\\r]+){0,2})/gi,\n    /(?:imported[\\s]*by|importer)[:\\s]*([^\\n\\r]+(?:\\n[^\\n\\r]+){0,2})/gi,\n    /(?:marketed[\\s]*by|marketer)[:\\s]*([^\\n\\r]+(?:\\n[^\\n\\r]+){0,2})/gi\n  ],\n  \n  // Date of manufacture, packaging, or import\n  month_year_of_manufacture_pack_or_import: [\n    /(?:mfg\\.?[\\s]*date|manufactured[\\s]*on|mfd\\.?[\\s]*on|date[\\s]*of[\\s]*mfg)[:\\s]*([0-9]{1,2}[\\/\\-\\.][0-9]{1,2}[\\/\\-\\.][0-9]{2,4}|[a-z]{3,}[\\s]*[0-9]{2,4})/gi,\n    /(?:packed[\\s]*on|pkg\\.?[\\s]*date|packing[\\s]*date)[:\\s]*([0-9]{1,2}[\\/\\-\\.][0-9]{1,2}[\\/\\-\\.][0-9]{2,4}|[a-z]{3,}[\\s]*[0-9]{2,4})/gi,\n    /(?:exp\\.?[\\s]*date|expiry|expires?[\\s]*on|best[\\s]*before)[:\\s]*([0-9]{1,2}[\\/\\-\\.][0-9]{1,2}[\\/\\-\\.][0-9]{2,4}|[a-z]{3,}[\\s]*[0-9]{2,4})/gi\n  ],\n  \n  // Country of origin\n  country_of_origin: [\n    /(?:country[\\s]*of[\\s]*origin|origin|made[\\s]*in)[:\\s]*([a-z\\s]+)/gi,\n    /made[\\s]*in[\\s]*([a-z\\s]+)/gi\n  ],\n  \n  // Consumer care details (phone, email, address)\n  consumer_care: [\n    /(?:customer[\\s]*care|consumer[\\s]*care|helpline|support)[:\\s]*([0-9\\s\\-\\+\\(\\)]+)/gi,\n    /(?:ph\\.?|phone|tel\\.?|call)[:\\s]*([0-9\\s\\-\\+\\(\\)]+)/gi,\n    /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/g,\n    /(?:address|contact)[:\\s]*([^\\n\\r]+(?:\\n[^\\n\\r]+){0,2})/gi\n  ]\n};\n\n// Preprocess image for better OCR accuracy\nasync function preprocessImage(imagePath) {\n  try {\n    const outputPath = imagePath.replace(/\\.[^/.]+$/, '_processed.png');\n    \n    await sharp(imagePath)\n      .greyscale()\n      .resize({ width: 1200, height: null, withoutEnlargement: true })\n      .sharpen()\n      .threshold(180)\n      .png()\n      .toFile(outputPath);\n    \n    return outputPath;\n  } catch (error) {\n    console.error('Image preprocessing failed:', error.message);\n    return imagePath; // Return original if preprocessing fails\n  }\n}\n\n// Extract text using Tesseract.js with language fallback\nasync function extractTextFromImage(imagePath) {\n  try {\n    const processedPath = await preprocessImage(imagePath);\n    \n    let ocrResult;\n    try {\n      // Try with Hindi support first\n      ocrResult = await Tesseract.recognize(processedPath, 'eng+hin', {\n        logger: m => {\n          if (m.status === 'recognizing text') {\n            console.log(`OCR Progress: ${Math.round(m.progress * 100)}%`);\n          }\n        }\n      });\n    } catch (hindiError) {\n      console.log('Hindi language pack failed, falling back to English only:', hindiError.message);\n      // Fallback to English only\n      ocrResult = await Tesseract.recognize(processedPath, 'eng', {\n        logger: m => {\n          if (m.status === 'recognizing text') {\n            console.log(`OCR Progress (English): ${Math.round(m.progress * 100)}%`);\n          }\n        }\n      });\n    }\n    \n    // Clean up processed image\n    if (processedPath !== imagePath) {\n      try {\n        await fs.unlink(processedPath);\n      } catch (e) {\n        // Ignore cleanup errors\n      }\n    }\n    \n    return {\n      text: ocrResult.data.text,\n      confidence: ocrResult.data.confidence / 100, // Convert to 0-1 scale\n      blocks: ocrResult.data.blocks\n    };\n  } catch (error) {\n    console.error('OCR extraction failed:', error.message);\n    throw new Error(`OCR processing failed: ${error.message}`);\n  }\n}\n\n// Extract specific field using patterns\nfunction extractField(text, fieldName) {\n  const patterns = FIELD_PATTERNS[fieldName] || [];\n  let bestMatch = null;\n  let highestConfidence = 0;\n  \n  for (const pattern of patterns) {\n    const matches = text.match(pattern);\n    if (matches) {\n      for (const match of matches) {\n        const groups = pattern.exec(text);\n        if (groups && groups[1]) {\n          const value = groups[1].trim();\n          if (value.length > 2) {\n            // Simple confidence based on length and position\n            const confidence = Math.min(0.9, 0.6 + (value.length / 100));\n            if (confidence > highestConfidence) {\n              highestConfidence = confidence;\n              bestMatch = value;\n            }\n          }\n        }\n        // Reset regex lastIndex for global patterns\n        pattern.lastIndex = 0;\n      }\n    }\n  }\n  \n  return {\n    value: bestMatch,\n    confidence: highestConfidence\n  };\n}\n\n// Main OCR processing function\nasync function processLabelImage(imagePath) {\n  try {\n    console.log('Starting OCR processing for:', imagePath);\n    \n    // Get image metadata\n    const metadata = await sharp(imagePath).metadata();\n    const imageResolution = {\n      width: metadata.width,\n      height: metadata.height\n    };\n    \n    // Extract text using OCR\n    const ocrResult = await extractTextFromImage(imagePath);\n    console.log('OCR extraction completed with confidence:', ocrResult.confidence);\n    \n    // Extract all required Legal Metrology fields\n    const fields = {};\n    const fieldConfidences = {};\n    \n    for (const fieldName of Object.keys(FIELD_PATTERNS)) {\n      const extraction = extractField(ocrResult.text, fieldName);\n      fields[fieldName] = extraction.value;\n      fieldConfidences[fieldName] = extraction.confidence;\n    }\n    \n    // Calculate overall confidence\n    const confidenceValues = Object.values(fieldConfidences).filter(c => c > 0);\n    const overallConfidence = confidenceValues.length > 0 \n      ? confidenceValues.reduce((a, b) => a + b, 0) / confidenceValues.length \n      : 0;\n    \n    // Map to canonical keys expected by server\n    const normalizedFields = {\n      product_name: fields.product_name || null,\n      MRP: fields.mrp_inclusive || null,\n      manufacturer: fields.manufacturer_or_importer_name_address || null,\n      net_quantity: fields.net_quantity || null,\n      country_of_origin: fields.country_of_origin || null,\n      consumer_care: fields.consumer_care || null,\n      date_of_manufacture: fields.month_year_of_manufacture_pack_or_import || null,\n      _ocr_confidence: Math.max(overallConfidence, ocrResult.confidence),\n      _image_resolution: imageResolution,\n      _field_confidences: {\n        product_name: fieldConfidences.product_name || 0,\n        MRP: fieldConfidences.mrp_inclusive || 0,\n        manufacturer: fieldConfidences.manufacturer_or_importer_name_address || 0,\n        net_quantity: fieldConfidences.net_quantity || 0,\n        country_of_origin: fieldConfidences.country_of_origin || 0,\n        consumer_care: fieldConfidences.consumer_care || 0,\n        date_of_manufacture: fieldConfidences.month_year_of_manufacture_pack_or_import || 0\n      },\n      _extracted_text: ocrResult.text.substring(0, 500), // Keep sample for debugging\n      _ocr_source: 'image'\n    };\n    \n    console.log('OCR processing completed. Fields extracted:', Object.keys(normalizedFields).filter(k => normalizedFields[k] && !k.startsWith('_')));\n    \n    return normalizedFields;\n    \n  } catch (error) {\n    console.error('OCR processing error:', error.message);\n    throw new Error(`Failed to process label image: ${error.message}`);\n  }\n}\n\nmodule.exports = {\n  processLabelImage,\n  extractTextFromImage,\n  FIELD_PATTERNS\n};","size_bytes":8370},"backend/schema.js":{"content":"// schema.js - Normalized ParsedLabel schema for Legal Metrology compliance\n// Ensures consistent data structure across OCR, URL scraping, and AI processing\n\n/**\n * Normalized ParsedLabel Schema - All 6 mandatory Legal Metrology fields\n * Based on Legal Metrology (Packaged Commodities) Rules, 2011\n */\n\nconst MANDATORY_FIELDS = {\n  // 1. Name and address of manufacturer/packer/importer\n  manufacturer: {\n    required: true,\n    type: 'string',\n    maxLength: 200,\n    description: 'Name and address of manufacturer, packer, or importer',\n    validation: /^.{3,}$/  // Minimum 3 characters\n  },\n  \n  // 2. Net quantity in terms of standard units\n  net_quantity: {\n    required: true,\n    type: 'string',\n    maxLength: 50,\n    description: 'Net quantity in standard units (weight, measure, or number)',\n    validation: /\\d+\\s*(g|kg|ml|l|gm|gms|liters?|pieces?|pcs|tablets?|nos?)/i\n  },\n  \n  // 3. Retail sale price (MRP) inclusive of all taxes\n  MRP: {\n    required: true,\n    type: 'string',\n    maxLength: 50,\n    description: 'Maximum Retail Price inclusive of all taxes',\n    validation: /₹?\\s*\\d+(?:[.,]\\d+)?|rs\\.?\\s*\\d+/i\n  },\n  \n  // 4. Consumer care details\n  consumer_care: {\n    required: true,\n    type: 'string',\n    maxLength: 150,\n    description: 'Consumer care details (phone, email, or address)',\n    validation: /\\d{10}|@|\\d{3,}/  // Phone, email, or substantial text\n  },\n  \n  // 5. Date of manufacture/import\n  date_of_manufacture: {\n    required: true,\n    type: 'string',\n    maxLength: 50,\n    description: 'Date of manufacture, packing, or import',\n    validation: /\\d{1,2}[\\/\\-\\.]\\d{1,2}[\\/\\-\\.]\\d{2,4}|[a-z]{3,}\\s*\\d{2,4}/i\n  },\n  \n  // 6. Country of origin\n  country_of_origin: {\n    required: true,\n    type: 'string',\n    maxLength: 100,\n    description: 'Country of origin or manufacture',\n    validation: /^[a-z\\s]{2,}$/i  // At least 2 characters, letters and spaces only\n  }\n};\n\n// Optional supplemental fields (not counted in compliance scoring)\nconst SUPPLEMENTAL_FIELDS = {\n  product_name: {\n    required: false,\n    type: 'string',\n    maxLength: 200,\n    description: 'Product name or title (supplemental identifier)',\n    validation: /^.{3,}$/  // Minimum 3 characters\n  }\n};\n\n/**\n * Create normalized ParsedLabel with validation and confidence scores\n * @param {Object} rawData - Raw extracted data from OCR or scraping\n * @param {Object} options - Additional options (source, confidence, etc.)\n * @returns {Object} Normalized ParsedLabel\n */\nfunction createNormalizedLabel(rawData, options = {}) {\n  const normalized = {};\n  const fieldConfidences = {};\n  const violations = [];\n  \n  // Process each mandatory field (exactly 6 for Legal Metrology compliance)\n  for (const [fieldName, schema] of Object.entries(MANDATORY_FIELDS)) {\n    let value = rawData[fieldName];\n    let confidence = options.fieldConfidences?.[fieldName] || 0.5; // Default confidence for URL sources\n    \n    // Sanitize and validate\n    if (value && typeof value === 'string') {\n      value = value.trim().substring(0, schema.maxLength);\n      \n      // Check if value is meaningful (not just placeholder)\n      if (value.length < 2 || value.toLowerCase().includes('not available') || \n          value.toLowerCase().includes('n/a') || value === '-' || value === '—') {\n        value = null;\n      } else {\n        // Validate against schema pattern\n        if (schema.validation && !schema.validation.test(value)) {\n          confidence = Math.max(0, confidence - 0.3); // Reduce confidence for invalid format\n          violations.push({\n            field: fieldName,\n            type: 'format',\n            severity: 'medium',\n            message: `${schema.description} format is invalid: \"${value}\"`\n          });\n        }\n      }\n    } else {\n      value = null;\n    }\n    \n    normalized[fieldName] = value;\n    fieldConfidences[fieldName] = confidence;\n    \n    // Check for missing required fields\n    if (schema.required && (!value || value.trim() === '')) {\n      violations.push({\n        field: fieldName,\n        type: 'missing',\n        severity: 'high',\n        message: `${schema.description} is required but missing`\n      });\n    }\n  }\n  \n  // Process supplemental fields (don't count in compliance)\n  for (const [fieldName, schema] of Object.entries(SUPPLEMENTAL_FIELDS)) {\n    let value = rawData[fieldName];\n    if (value && typeof value === 'string') {\n      value = value.trim().substring(0, schema.maxLength);\n      if (value.length < 2 || value.toLowerCase().includes('not available') || \n          value.toLowerCase().includes('n/a') || value === '-' || value === '—') {\n        value = null;\n      }\n    } else {\n      value = null;\n    }\n    normalized[fieldName] = value;\n  }\n  \n  // Calculate overall compliance score (only mandatory fields)\n  const totalFields = Object.keys(MANDATORY_FIELDS).length; // Always 6\n  const presentFields = Object.entries(MANDATORY_FIELDS)\n    .filter(([fieldName]) => normalized[fieldName] && normalized[fieldName].trim()).length;\n  \n  // Calculate average confidence (only for present fields to avoid over-penalization)\n  const presentConfidences = Object.entries(MANDATORY_FIELDS)\n    .filter(([fieldName]) => normalized[fieldName])\n    .map(([fieldName]) => fieldConfidences[fieldName]);\n  const avgConfidence = presentConfidences.length > 0 \n    ? presentConfidences.reduce((a, b) => a + b, 0) / presentConfidences.length \n    : 0;\n  \n  const baseScore = (presentFields / totalFields) * 100;\n  const confidencePenalty = avgConfidence < 0.6 ? (0.6 - avgConfidence) * 30 : 0; // Scale penalty\n  const complianceScore = Math.max(0, Math.round(baseScore - confidencePenalty));\n  \n  // Determine status (only based on mandatory fields)\n  let status = 'failed';\n  const highSeverityViolations = violations.filter(v => v.severity === 'high').length;\n  if (highSeverityViolations === 0) {\n    status = avgConfidence > 0.7 ? 'approved' : 'needs_review';\n  } else if (presentFields >= totalFields * 0.7) {\n    status = 'needs_review';\n  }\n  \n  return {\n    // Core product data\n    ...normalized,\n    \n    // Metadata\n    _schema_version: '1.0',\n    _source: options.source || 'unknown',\n    _timestamp: new Date().toISOString(),\n    \n    // Quality metrics\n    _ocr_confidence: options.ocrConfidence || 0,\n    _image_resolution: options.imageResolution,\n    _field_confidences: fieldConfidences,\n    \n    // Compliance assessment\n    compliance_score: complianceScore,\n    status: status,\n    violations: violations,\n    fields_present: presentFields,\n    fields_total: totalFields,\n    \n    // Debug info (only in development)\n    ...(process.env.NODE_ENV !== 'production' && {\n      _extracted_text: options.extractedText?.substring(0, 500),\n      _debug_info: options.debugInfo\n    })\n  };\n}\n\n/**\n * Validate ParsedLabel against schema\n * @param {Object} label - ParsedLabel to validate\n * @returns {Object} Validation result with errors\n */\nfunction validateLabel(label) {\n  const errors = [];\n  \n  // Check required schema fields\n  if (!label._schema_version) {\n    errors.push('Missing schema version');\n  }\n  \n  if (!label._source) {\n    errors.push('Missing source information');\n  }\n  \n  // Check mandatory fields presence\n  for (const fieldName of Object.keys(MANDATORY_FIELDS)) {\n    if (!(fieldName in label)) {\n      errors.push(`Missing field: ${fieldName}`);\n    }\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors: errors\n  };\n}\n\n/**\n * Get field schema information\n * @param {string} fieldName - Name of the field\n * @returns {Object} Schema information for the field\n */\nfunction getFieldSchema(fieldName) {\n  return MANDATORY_FIELDS[fieldName] || null;\n}\n\n/**\n * Get all mandatory field names\n * @returns {Array} Array of mandatory field names\n */\nfunction getMandatoryFields() {\n  return Object.keys(MANDATORY_FIELDS);\n}\n\nmodule.exports = {\n  MANDATORY_FIELDS,\n  SUPPLEMENTAL_FIELDS,\n  createNormalizedLabel,\n  validateLabel,\n  getFieldSchema,\n  getMandatoryFields\n};","size_bytes":7976},"backend/server.js":{"content":"// server.js - sample Express backend for OCR/scraping pipeline (demo)\n// NOTE: This is a starter example. Replace mock parsing with real OCR / scraping.\nconst express = require('express');\nconst multer = require('multer');\nconst axios = require('axios');\nconst cheerio = require('cheerio');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst mimeTypes = require('mime-types');\nconst dns = require('dns').promises;\nconst fs = require('fs').promises;\nconst path = require('path');\n\n// Import OCR processor and schema\nconst { processLabelImage } = require('./ocr-processor');\nconst { createNormalizedLabel, validateLabel } = require('./schema');\nconst { operations: db } = require('./database');\n\n// Initialize OpenAI client (optional - only if API key provided)\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst OpenAI = require('openai');\nlet openai = null;\n\nif (process.env.OPENAI_API_KEY) {\n  openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n  console.log('OpenAI client initialized successfully');\n} else {\n  console.log('OpenAI API key not provided. AI features will be disabled.');\n}\n\n// Configure secure file upload with limits\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n    files: 1\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedMimes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n    if (allowedMimes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only images are allowed.'), false);\n    }\n  }\n});\n\nconst app = express();\n\n// Trust proxy when behind reverse proxy (Replit environment)\napp.set('trust proxy', 1);\n\n// Apply security headers\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      scriptSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      objectSrc: [\"'none'\"],\n      upgradeInsecureRequests: []\n    },\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: {\n    error: 'Too many requests from this IP, please try again later.'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst checkLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 20, // Limit check endpoint to 20 requests per windowMs\n  message: {\n    error: 'Too many compliance check requests, please try again later.'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\napp.use(limiter);\napp.use('/api/check', checkLimiter);\n// Configure CORS to be more restrictive and production-ready\nconst corsOptions = {\n  origin: function (origin, callback) {\n    // Allow requests with no origin (like mobile apps or curl requests)\n    if (!origin) return callback(null, true);\n    \n    const allowedOrigins = process.env.NODE_ENV === 'production'\n      ? [\n          process.env.FRONTEND_URL,\n          process.env.DOMAIN ? `https://${process.env.DOMAIN}` : null,\n          'https://localhost:5000' // Replit preview\n        ].filter(Boolean)\n      : [\n          'http://localhost:5000',\n          'https://localhost:5000',\n          /^https:\\/\\/.*\\.replit\\.dev$/,\n          /^https:\\/\\/.*\\.repl\\.co$/\n        ];\n    \n    const isAllowed = allowedOrigins.some(allowedOrigin => {\n      if (typeof allowedOrigin === 'string') {\n        return origin === allowedOrigin;\n      }\n      if (allowedOrigin instanceof RegExp) {\n        return allowedOrigin.test(origin);\n      }\n      return false;\n    });\n    \n    if (isAllowed) {\n      callback(null, true);\n    } else {\n      console.warn(`CORS blocked origin: ${origin}`);\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n  optionsSuccessStatus: 200,\n  methods: ['GET', 'POST', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  exposedHeaders: ['X-RateLimit-Limit', 'X-RateLimit-Remaining']\n};\napp.use(cors(corsOptions));\napp.use(express.json({ limit: '10mb' })); // Prevent large JSON payloads\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Enhanced URL validation to prevent SSRF with DNS resolution checks\nasync function validateUrl(url) {\n  try {\n    const parsedUrl = new URL(url);\n    \n    // Only allow http and https protocols\n    if (!['http:', 'https:'].includes(parsedUrl.protocol)) {\n      throw new Error('Only HTTP and HTTPS protocols are allowed');\n    }\n    \n    const hostname = parsedUrl.hostname.toLowerCase();\n    \n    // Block private IP ranges and localhost (initial check)\n    const privatePatterns = [\n      /^127\\./, // 127.x.x.x (localhost)\n      /^10\\./, // 10.x.x.x (private)\n      /^172\\.(1[6-9]|2[0-9]|3[0-1])\\./, // 172.16.x.x - 172.31.x.x (private)\n      /^192\\.168\\./, // 192.168.x.x (private)\n      /^169\\.254\\./, // 169.254.x.x (link-local)\n      /^::1$/, // IPv6 localhost\n      /^fc00:/, // IPv6 private\n      /^fe80:/, // IPv6 link-local\n      /localhost/i,\n      /\\.local$/i,\n      /^metadata\\./, // AWS metadata\n      /^169\\.254\\.169\\.254$/, // AWS metadata IP\n    ];\n    \n    if (privatePatterns.some(pattern => pattern.test(hostname))) {\n      throw new Error('Access to private IP ranges is not allowed');\n    }\n    \n    // DNS resolution check to prevent DNS rebinding attacks\n    try {\n      const addresses = await dns.resolve4(hostname).catch(() => []);\n      const addresses6 = await dns.resolve6(hostname).catch(() => []);\n      const allAddresses = [...addresses, ...addresses6];\n      \n      for (const addr of allAddresses) {\n        if (privatePatterns.some(pattern => pattern.test(addr))) {\n          throw new Error('Domain resolves to private IP address');\n        }\n        // Additional specific IP blocks\n        if (addr.startsWith('0.') || addr === '255.255.255.255') {\n          throw new Error('Invalid IP address range');\n        }\n      }\n    } catch (dnsError) {\n      if (dnsError.message.includes('private IP') || dnsError.message.includes('Invalid IP')) {\n        throw dnsError;\n      }\n      // DNS resolution failed, allow but log\n      console.warn(`DNS resolution failed for ${hostname}: ${dnsError.message}`);\n    }\n    \n    return true;\n  } catch (error) {\n    throw new Error(`URL validation failed: ${error.message}`);\n  }\n}\n\n// Utility function to clean up uploaded files\nasync function cleanupFile(filePath) {\n  try {\n    if (filePath && await fs.access(filePath).then(() => true).catch(() => false)) {\n      await fs.unlink(filePath);\n    }\n  } catch (error) {\n    console.error('Error cleaning up file:', error.message);\n  }\n}\n\n// Sanitize error messages to prevent information disclosure\nfunction sanitizeError(error, isProduction = process.env.NODE_ENV === 'production') {\n  if (isProduction) {\n    // In production, return generic error messages\n    if (error.message.includes('validation') || error.message.includes('Invalid')) {\n      return 'Invalid input provided';\n    }\n    if (error.message.includes('network') || error.message.includes('timeout')) {\n      return 'Network error occurred';\n    }\n    return 'An error occurred while processing your request';\n  }\n  // In development, return the actual error (but still sanitize sensitive info)\n  return error.message.replace(/file:\\/\\/[^\\s]+/g, '[FILE_PATH]').replace(/https?:\\/\\/[^\\s]+/g, '[URL]');\n}\n\n// Enhanced function to extract structured data (JSON-LD, OpenGraph) with Flipkart support\nfunction extractStructuredData($) {\n  const data = {};\n  \n  // Try JSON-LD first (most reliable for e-commerce)\n  $('script[type=\"application/ld+json\"]').each((i, el) => {\n    try {\n      const jsonText = $(el).html().trim();\n      if (!jsonText) return;\n      \n      const jsonData = JSON.parse(jsonText);\n      \n      // Handle array of JSON-LD objects\n      const schemas = Array.isArray(jsonData) ? jsonData : [jsonData];\n      \n      for (const schema of schemas) {\n        // Standard Product schema\n        if (schema['@type'] === 'Product') {\n          data.product_name = data.product_name || schema.name;\n          data.price = data.price || schema.offers?.price || schema.offers?.[0]?.price;\n          data.manufacturer = data.manufacturer || schema.brand?.name || schema.manufacturer?.name;\n          data.net_quantity = data.net_quantity || schema.weight?.value || schema.size;\n          data.country_of_origin = data.country_of_origin || schema.countryOfOrigin;\n        }\n        \n        // BreadcrumbList can contain product info\n        if (schema['@type'] === 'BreadcrumbList' && schema.itemListElement) {\n          const productBreadcrumb = schema.itemListElement.find(item => \n            item.item && item.item.name && !item.item.name.includes('Home') && !item.item.name.includes('Category')\n          );\n          if (productBreadcrumb && !data.product_name) {\n            data.product_name = productBreadcrumb.item.name;\n          }\n        }\n        \n        // WebPage or WebSite can contain product details\n        if ((schema['@type'] === 'WebPage' || schema['@type'] === 'WebSite') && schema.mainEntity) {\n          const mainEntity = schema.mainEntity;\n          if (mainEntity['@type'] === 'Product') {\n            data.product_name = data.product_name || mainEntity.name;\n            data.price = data.price || mainEntity.offers?.price || mainEntity.offers?.[0]?.price;\n            data.manufacturer = data.manufacturer || mainEntity.brand?.name || mainEntity.manufacturer?.name;\n          }\n        }\n        \n        // Flipkart-specific: Organization schema sometimes contains brand info\n        if (schema['@type'] === 'Organization' && schema.name && !data.manufacturer) {\n          // Only use if it looks like a brand name (not \"Flipkart\")\n          if (!schema.name.toLowerCase().includes('flipkart')) {\n            data.manufacturer = schema.name;\n          }\n        }\n      }\n    } catch (e) {\n      console.log('JSON-LD parsing error:', e.message);\n      // Continue to next script tag\n    }\n  });\n  \n  // Enhanced OpenGraph/meta tag extraction\n  if (!data.product_name) {\n    data.product_name = $('meta[property=\"og:title\"]').attr('content') ||\n                       $('meta[name=\"title\"]').attr('content') ||\n                       $('meta[property=\"og:site_name\"]').attr('content');\n  }\n  \n  if (!data.price) {\n    const priceAmount = $('meta[property=\"product:price:amount\"]').attr('content') ||\n                       $('meta[name=\"price\"]').attr('content');\n    // Only use price amount, not currency code\n    if (priceAmount && /\\d/.test(priceAmount)) {\n      data.price = priceAmount;\n    }\n  }\n  \n  if (!data.manufacturer) {\n    data.manufacturer = $('meta[property=\"product:brand\"]').attr('content') ||\n                       $('meta[name=\"brand\"]').attr('content') ||\n                       $('meta[property=\"og:brand\"]').attr('content');\n  }\n  \n  // Additional meta tag checks for Flipkart\n  if (!data.net_quantity) {\n    data.net_quantity = $('meta[name=\"weight\"]').attr('content') ||\n                       $('meta[property=\"product:weight\"]').attr('content');\n  }\n  \n  if (!data.country_of_origin) {\n    data.country_of_origin = $('meta[name=\"origin\"]').attr('content') ||\n                            $('meta[property=\"product:origin\"]').attr('content');\n  }\n  \n  console.log('Structured data extracted:', Object.keys(data).filter(k => data[k]));\n  return data;\n}\n\n// AI-powered field normalization and enhancement\nasync function normalizeProductData(data) {\n  if (!openai || !process.env.OPENAI_API_KEY) {\n    console.log('OpenAI not configured, skipping AI normalization');\n    return { ...data, ai_confidence: 0 };\n  }\n\n  try {\n    const prompt = `Analyze and normalize this e-commerce product data. Extract missing fields, standardize units, and clean up the information. Return JSON with normalized data and confidence scores.\n\nProduct Data:\n${JSON.stringify(data, null, 2)}\n\nRules:\n1. Clean and standardize product names (remove excessive marketing text)\n2. Extract numeric MRP/price with currency (₹ for Indian sites)\n3. Standardize manufacturer/brand names (canonical forms)\n4. Normalize net_quantity with proper units (g, kg, ml, l, pieces)\n5. Standardize country_of_origin (full country names)\n6. Add confidence score (0-1) for each field\n\nReturn JSON in this exact format:\n{\n  \"product_name\": \"cleaned name\",\n  \"MRP\": \"₹amount\",\n  \"manufacturer\": \"Brand Name\",\n  \"net_quantity\": \"amount unit\",\n  \"country_of_origin\": \"Country Name\",\n  \"confidence\": {\n    \"product_name\": 0.9,\n    \"MRP\": 0.8,\n    \"manufacturer\": 0.9,\n    \"net_quantity\": 0.7,\n    \"country_of_origin\": 0.6\n  },\n  \"ai_enhanced\": true\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3\n    });\n\n    const aiResult = JSON.parse(response.choices[0].message.content);\n    \n    // Merge AI results with original data, preferring AI when confidence > 0.7\n    const normalized = { ...data };\n    for (const [key, value] of Object.entries(aiResult)) {\n      if (key === 'confidence' || key === 'ai_enhanced') continue;\n      if (value && (!data[key] || aiResult.confidence?.[key] > 0.7)) {\n        normalized[key] = value;\n      }\n    }\n    \n    normalized.ai_confidence = aiResult.confidence || {};\n    normalized.ai_enhanced = true;\n    \n    return normalized;\n  } catch (error) {\n    console.log('AI normalization failed:', error.message);\n    return { ...data, ai_confidence: {}, ai_enhanced: false };\n  }\n}\n\n// AI-powered compliance explanation generator\nasync function generateComplianceExplanation(violations, productData) {\n  if (!openai || !process.env.OPENAI_API_KEY || violations.length === 0) {\n    return null;\n  }\n\n  try {\n    const prompt = `Generate clear, helpful explanations for Legal Metrology compliance violations. Make it easy to understand and actionable.\n\nProduct: ${productData.product_name || 'Unknown Product'}\nViolations: ${violations.join(', ')}\n\nFor each violation, explain:\n1. What's missing/wrong\n2. Why it's required by Indian Legal Metrology rules\n3. How to fix it (specific steps)\n\nKeep explanations under 120 words total. Be helpful, not technical. Return JSON format:\n{\n  \"explanation\": \"Clear explanation of what's wrong and how to fix\",\n  \"severity\": \"low|medium|high\",\n  \"confidence\": 0.9\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.4\n    });\n\n    return JSON.parse(response.choices[0].message.content);\n  } catch (error) {\n    console.log('AI explanation failed:', error.message);\n    return null;\n  }\n}\n\n// Enhanced generic extraction functions\nfunction getGenericProductName($) {\n  return ($('h1').first().text() ||\n          $('[class*=\"title\"]').first().text() ||\n          $('[id*=\"title\"]').first().text() ||\n          $('[data-testid*=\"title\"]').first().text() ||\n          $('.product-name').text() ||\n          $('.item-title').text()).trim() || null;\n}\n\nfunction getGenericPrice($) {\n  return ($('[class*=\"price\"]').first().text() ||\n          $('[id*=\"price\"]').first().text() ||\n          $('[data-testid*=\"price\"]').first().text() ||\n          $('.cost').text() ||\n          $('.amount').text()).trim() || null;\n}\n\nfunction getGenericManufacturer($) {\n  return ($('[class*=\"brand\"]').first().text() ||\n          $('[class*=\"manufacturer\"]').first().text() ||\n          $('[data-testid*=\"brand\"]').first().text() ||\n          $('.company').text() ||\n          $('.maker').text()).trim() || null;\n}\n\nfunction getGenericQuantity($) {\n  return ($('[class*=\"quantity\"]').first().text() ||\n          $('[class*=\"weight\"]').first().text() ||\n          $('[class*=\"size\"]').first().text() ||\n          $('span:contains(\"g\"), span:contains(\"kg\"), span:contains(\"ml\"), span:contains(\"l\")').first().text()).trim() || null;\n}\n\nfunction getGenericCountryOfOrigin($) {\n  return ($('[class*=\"origin\"]').first().text() ||\n          $('.country').text() ||\n          $('*:contains(\"Made in\")').first().text()).trim() || null;\n}\n\n// Enhanced scrape function with better security and error handling\nasync function scrapeProduct(url) {\n  await validateUrl(url);\n  \n  // Detect platform and adjust settings\n  const isFlipkart = url.includes('flipkart.com');\n  const isAmazon = url.includes('amazon.') || url.includes('amzn.');\n  const isMyntra = url.includes('myntra.com');\n  const isNykaa = url.includes('nykaa.com');\n  \n  // Advanced User-Agent rotation for stealth scraping\n  const userAgents = [\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15',\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36 Edg/123.0.0.0'\n  ];\n  \n  const randomUserAgent = userAgents[Math.floor(Math.random() * userAgents.length)];\n  \n  // Enhanced stealth headers to mimic real browser behavior\n  const headers = {\n    'User-Agent': randomUserAgent,\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',\n    'Accept-Language': 'en-US,en;q=0.9,hi-IN;q=0.8,hi;q=0.7,mr;q=0.6',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Cache-Control': 'max-age=0',\n    'Sec-Ch-Ua': '\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\"',\n    'Sec-Ch-Ua-Mobile': '?0',\n    'Sec-Ch-Ua-Platform': '\"Windows\"',\n    'Sec-Fetch-Dest': 'document',\n    'Sec-Fetch-Mode': 'navigate',\n    'Sec-Fetch-Site': 'none',\n    'Sec-Fetch-User': '?1',\n    'Upgrade-Insecure-Requests': '1',\n    'Connection': 'keep-alive',\n    'DNT': '1'\n  };\n  \n  // Add platform-specific stealth headers\n  if (isFlipkart) {\n    headers['Referer'] = 'https://www.flipkart.com/';\n    headers['Origin'] = 'https://www.flipkart.com';\n    headers['X-User-Agent'] = `${randomUserAgent} FKUA/website/42/website/Desktop`;\n    headers['X-Requested-With'] = 'XMLHttpRequest';\n  } else if (isMyntra) {\n    headers['Referer'] = 'https://www.myntra.com/';\n    headers['Origin'] = 'https://www.myntra.com';\n    headers['X-Myntra-App'] = 'desktop';\n    headers['X-Requested-With'] = 'XMLHttpRequest';\n  }\n  \n  \n  const { data } = await axios.get(url, { \n    timeout: (isFlipkart || isMyntra) ? 15000 : 8000, // Longer timeout for problematic sites\n    maxContentLength: 3 * 1024 * 1024, // 3MB limit\n    maxRedirects: 3,\n    headers,\n    validateStatus: function (status) {\n      return status >= 200 && status < 400; // Accept 2xx and 3xx status codes\n    }\n  });\n  \n  // Debug logging for problematic sites\n  if (isMyntra && data.includes('Something went wrong')) {\n    console.log('Myntra returned error page, likely bot detection');\n  }\n  \n  const $ = cheerio.load(data);\n  \n  // Enhanced extraction with site-specific selectors\n  let product_name = null;\n  let price = null;\n  let net_quantity = null;\n  let manufacturer = null;\n  let country_of_origin = null;\n  \n  // First try to extract from structured data (JSON-LD, OpenGraph)\n  const structuredData = extractStructuredData($);\n  if (structuredData && Object.keys(structuredData).length > 0) {\n    product_name = structuredData.product_name || product_name;\n    price = structuredData.price || price;\n    manufacturer = structuredData.manufacturer || manufacturer;\n    net_quantity = structuredData.net_quantity || net_quantity;\n    country_of_origin = structuredData.country_of_origin || country_of_origin;\n  }\n\n  // Site-specific extractors for enhanced accuracy\n  \n  if (isFlipkart) {\n    // Enhanced Flipkart-specific selectors (2024 current structure)\n    console.log('Processing Flipkart URL with enhanced selectors');\n    \n    // Product name - try multiple current selectors\n    product_name = product_name || (\n      $('span[class*=\"B_NuCI\"]').text() ||  // Current main title class\n      $('h1[class*=\"x2Jnos\"]').text() ||    // Alternative title class  \n      $('span.B_NuCI').text() ||            // Main product title\n      $('h1').filter(function() {\n        return $(this).text().length > 10;   // Find substantial h1 content\n      }).first().text() ||\n      $('._35KyD6').text() ||               // Fallback older selector\n      $('[data-testid=\"lblPDPProductName\"]').text() ||\n      $('h1').first().text()\n    ).trim() || null;\n    \n    // Price - multiple current price selectors\n    price = price || (\n      $('div[class*=\"_30jeq3 _16Jk6d\"]').text() ||  // Current price format\n      $('div[class*=\"_30jeq3\"]').text() ||          // Price container\n      $('._3I9_wc._2p6lqe').text() ||               // Discounted price\n      $('._1_WHN1').text() ||                       // MRP\n      $('div[class*=\"price\"]').first().text() ||    // Generic price\n      $('[data-testid=\"lblPDPPrice\"]').text() ||\n      $('._25b18c .notranslate').text()             // Another price format\n    ).trim() || null;\n    \n    // Manufacturer/Brand - enhanced extraction\n    manufacturer = manufacturer || (\n      $('div:contains(\"Brand\") + div').text() ||           // Specification row\n      $('td:contains(\"Brand\")').next('td').text() ||       // Table format\n      $('._2WkVRV._13WGFt').text() ||                      // Old brand selector\n      $('tr:contains(\"Brand\") td:last').text() ||          // Table last cell\n      $('._21Ahn-').text() ||                              // Fallback\n      $('[data-testid=\"lblPDPBrand\"]').text() ||\n      $('div[class*=\"brand\"]').text()                      // Generic brand class\n    ).trim() || null;\n    \n    // Net quantity/weight\n    net_quantity = net_quantity || (\n      $('div:contains(\"Net Quantity\") + div').text() ||    // Specification format\n      $('div:contains(\"Weight\") + div').text() ||\n      $('td:contains(\"Net Quantity\")').next('td').text() ||\n      $('td:contains(\"Weight\")').next('td').text() ||\n      $('._3dG3ix').text() ||                              // Fallback older\n      $('[data-testid=\"lblPDPNetQuantity\"]').text() ||\n      $('div:contains(\"Pack Size\") + div').text()          // Alternative format\n    ).trim() || null;\n    \n    // Country of origin\n    country_of_origin = country_of_origin || (\n      $('div:contains(\"Country of Origin\") + div').text() ||\n      $('td:contains(\"Country of Origin\")').next('td').text() ||\n      $('div:contains(\"Made in\") + div').text() ||\n      $('td:contains(\"Made in\")').next('td').text() ||\n      $('[data-testid=\"lblPDPOrigin\"]').text() ||\n      $('div:contains(\"Manufactured\") + div').text()       // Alternative phrasing\n    ).trim() || null;\n                        \n  } else if (isMyntra) {\n    // Enhanced Myntra-specific selectors (updated for current site structure)\n    product_name = product_name || ($('.pdp-name').text() ||\n                   $('h1.pdp-title').text() ||\n                   $('.pdp-product-name').text() ||\n                   $('.product-title h1').text() ||\n                   $('h1').first().text()).trim() || null;\n    \n    price = price || ($('.pdp-price strong').text() ||\n            $('.price-price span').text() ||\n            $('.pdp-mrp').text() ||\n            $('.discounted-price').text() ||\n            $('[class*=\"price\"]').first().text()).trim() || null;\n    \n    manufacturer = manufacturer || ($('.pdp-product-brand-name').text() ||\n                   $('.index-brand').text() ||\n                   $('.brand-name').text() ||\n                   $('.pdp-brand a').text() ||\n                   $('.supplier-table tr:contains(\"Brand\") td').text()).trim() || null;\n    \n    net_quantity = net_quantity || ($('.supplier-table tr:contains(\"Weight\") td').text() ||\n                   $('.product-details tr:contains(\"Net Quantity\") td').text() ||\n                   $('.size-buttons button.selected').text()).trim() || null;\n    \n    country_of_origin = country_of_origin || ($('.supplier-table tr:contains(\"Country of Origin\") td').text() ||\n                        $('.product-details tr:contains(\"Made in\") td').text()).trim() || null;\n                        \n  } else if (isNykaa) {\n    // Nykaa-specific selectors  \n    product_name = product_name || ($('.product-title').text() ||\n                   $('h1.css-1gc4x7i').text() ||\n                   $('.css-xhqlr').text() ||\n                   $('h1').first().text()).trim() || null;\n    \n    price = price || ($('.css-1jczs19').text() ||\n            $('.discounted-price').text() ||\n            $('[class*=\"price\"]').first().text()).trim() || null;\n    \n    manufacturer = manufacturer || ($('.brand-name').text() ||\n                   $('.css-k008qs').text() ||\n                   $('.product-details tr:contains(\"Brand\") td').text()).trim() || null;\n                   \n  } else if (isAmazon) {\n    // Amazon-specific selectors\n    product_name = ($('#productTitle').text() ||\n                   $('h1[data-automation-id=\"product-title\"]').text() ||\n                   $('h1').first().text()).trim() || null;\n    \n    price = ($('.a-price .a-offscreen').first().text() ||\n            $('.a-price-whole').first().text() + '.' + $('.a-price-fraction').first().text() ||\n            $('.a-price-range .a-price .a-offscreen').first().text() ||\n            $('[class*=\"price\"]').first().text()).trim() || null;\n    \n    // Extract manufacturer from various Amazon-specific locations\n    manufacturer = ($('[data-feature-name=\"bylineInfo\"] a').text() ||\n                   $('.author .contributorNameID').text() ||\n                   $('a[data-asin]:contains(\"Store\")').text().replace(/Visit the|Store/g, '').trim() ||\n                   $('.po-brand .po-break-word').text() ||\n                   $('#bylineInfo_feature_div a').text() ||\n                   $('tr:contains(\"Brand\") td').text() ||\n                   $('th:contains(\"Brand\")').next().text()).trim() || null;\n    \n    // Extract quantity/weight from product details (Amazon-specific)\n    net_quantity = ($('tr:contains(\"Item Weight\") td:last').text() ||\n                   $('tr:contains(\"Package Weight\") td:last').text() ||\n                   $('tr:contains(\"Net Quantity\") td:last').text() ||\n                   $('.po-item_weight .po-break-word').text() ||\n                   $('span:contains(\"g\"), span:contains(\"kg\"), span:contains(\"ml\"), span:contains(\"l\")').first().text()).trim() || null;\n    \n    // Extract country from product details\n    country_of_origin = ($('tr:contains(\"Country of Origin\") td').text() ||\n                        $('tr:contains(\"Made in\") td').text() ||\n                        $('.a-size-base:contains(\"Country\")').parent().text()).trim() || null;\n  } else {\n    // Enhanced generic fallback with multiple strategies\n    product_name = product_name || getGenericProductName($);\n    price = price || getGenericPrice($);\n    manufacturer = manufacturer || getGenericManufacturer($);\n    net_quantity = net_quantity || getGenericQuantity($);\n    country_of_origin = country_of_origin || getGenericCountryOfOrigin($);\n  }\n  \n  // Clean up extracted data (ensure they are strings)\n  if (product_name && typeof product_name === 'string') product_name = product_name.substring(0, 200);\n  if (price && typeof price === 'string') price = price.substring(0, 50);\n  if (net_quantity && typeof net_quantity === 'string') net_quantity = net_quantity.substring(0, 50);\n  if (manufacturer && typeof manufacturer === 'string') manufacturer = manufacturer.substring(0, 100);\n  if (country_of_origin && typeof country_of_origin === 'string') country_of_origin = country_of_origin.substring(0, 100);\n  \n  let rawData = {\n    product_name,\n    MRP: price,\n    net_quantity,\n    manufacturer,\n    country_of_origin\n  };\n\n  // Apply AI normalization for better data quality\n  const normalizedData = await normalizeProductData(rawData);\n  \n  return normalizedData;\n}\n\napp.post('/api/check', \n  // Input validation middleware\n  [\n    body('url').optional().isURL({ protocols: ['http', 'https'], require_protocol: true })\n      .withMessage('Invalid URL format'),\n    body('url').optional().isLength({ max: 2048 })\n      .withMessage('URL too long')\n  ],\n  upload.single('image'), \n  async (req, res) => {\n    let uploadedFilePath = null;\n    const startTime = Date.now(); // Track processing time\n    \n    try {\n      // Check for validation errors\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ \n          error: 'Validation failed',\n          details: errors.array().map(err => err.msg)\n        });\n      }\n\n      const imageFile = req.file;\n      const { url } = req.body;\n      uploadedFilePath = imageFile?.path;\n\n      // Validate that we have either URL or image\n      if (!url && !imageFile) {\n        return res.status(400).json({ error: 'Provide either image file or url' });\n      }\n\n      if (url && imageFile) {\n        return res.status(400).json({ error: 'Provide either image file or url, not both' });\n      }\n\n      let parsed;\n      if (url) {\n        // Additional URL sanitization\n        const sanitizedUrl = url.trim();\n        if (sanitizedUrl.length > 2048) {\n          throw new Error('URL too long');\n        }\n        parsed = await scrapeProduct(sanitizedUrl);\n      } else if (imageFile) {\n        // Validate file type again (defense in depth)\n        const detectedType = mimeTypes.lookup(imageFile.originalname);\n        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n        \n        if (!allowedTypes.includes(imageFile.mimetype) && !allowedTypes.includes(detectedType)) {\n          throw new Error('Invalid file type');\n        }\n\n        // Process image with real OCR\n        console.log('Processing image with OCR:', imageFile.originalname);\n        parsed = await processLabelImage(imageFile.path);\n      }\n\n      // Rule engine with different requirements for URL vs Image processing\n      const isImageSource = parsed._ocr_source === 'image';\n      \n      // All 6 mandatory Legal Metrology fields for images, basic fields for URLs\n      const requiredForImages = [\n        'product_name',\n        'MRP', \n        'manufacturer',\n        'net_quantity',\n        'country_of_origin',\n        'consumer_care',\n        'date_of_manufacture'\n      ];\n      \n      const requiredForUrls = [\n        'product_name',\n        'MRP', \n        'manufacturer',\n        'net_quantity',\n        'country_of_origin'\n      ];\n      \n      const required = isImageSource ? requiredForImages : requiredForUrls;\n      const violations = [];\n      \n      const fieldNames = {\n        'product_name': 'Product Name',\n        'MRP': 'MRP (Retail Sale Price)',\n        'manufacturer': 'Manufacturer/Packer/Importer Name & Address',\n        'net_quantity': 'Net Quantity',\n        'country_of_origin': 'Country of Origin',\n        'consumer_care': 'Consumer Care Details',\n        'date_of_manufacture': 'Date of Manufacture/Import'\n      };\n      \n      required.forEach(k => { \n        if (!parsed[k] || (typeof parsed[k] === 'string' && parsed[k].trim() === '')) {\n          violations.push(`${fieldNames[k]} missing`);\n        }\n      });\n\n      const reasons = [];\n      if (parsed._ocr_confidence && parsed._ocr_confidence < 0.6) {\n        reasons.push('Low OCR confidence');\n      }\n      if (parsed._image_resolution && \n          (parsed._image_resolution.width < 400 || parsed._image_resolution.height < 300)) {\n        reasons.push('Low image resolution');\n      }\n\n      // Create normalized label using schema\n      const normalizedLabel = createNormalizedLabel(parsed, {\n        source: isImageSource ? 'image' : 'url',\n        fieldConfidences: parsed._field_confidences || {},\n        ocrConfidence: parsed._ocr_confidence || 0,\n        imageResolution: parsed._image_resolution,\n        extractedText: parsed._extracted_text,\n        debugInfo: { \n          inputType: imageFile ? 'image' : 'url',\n          url: url || 'N/A',\n          fileName: imageFile?.originalname || 'N/A'\n        }\n      });\n\n      // Validate normalized label structure\n      const validation = validateLabel(normalizedLabel);\n      if (!validation.valid && process.env.NODE_ENV !== 'production') {\n        console.warn('Schema validation errors:', validation.errors);\n      }\n\n      // Add legacy compatibility fields for frontend\n      const log = {\n        id: `check_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        parsed: {\n          product_name: normalizedLabel.product_name,\n          MRP: normalizedLabel.MRP,\n          manufacturer: normalizedLabel.manufacturer,\n          net_quantity: normalizedLabel.net_quantity,\n          country_of_origin: normalizedLabel.country_of_origin,\n          consumer_care: normalizedLabel.consumer_care,\n          date_of_manufacture: normalizedLabel.date_of_manufacture,\n          _ocr_confidence: normalizedLabel._ocr_confidence,\n          _image_resolution: normalizedLabel._image_resolution,\n          _field_confidences: normalizedLabel._field_confidences\n        },\n        compliance_score: normalizedLabel.compliance_score,\n        status: normalizedLabel.status,\n        violations: normalizedLabel.violations.map(v => v.message),\n        reasons: reasons, // Keep quality reasons separate\n        timestamp: normalizedLabel._timestamp,\n        // Include full normalized data for future use\n        _normalized: normalizedLabel\n      };\n\n      // Clean up uploaded file\n      if (uploadedFilePath) {\n        await cleanupFile(uploadedFilePath);\n      }\n\n      // Store submission in database\n      try {\n        const submissionData = {\n          id: log.id,\n          user_id: 'demo_user',\n          product_name: normalizedLabel.product_name,\n          input_type: req.file ? 'image' : 'url',\n          input_source: req.file ? req.file.originalname : (req.body.url || null),\n          \n          // Legal Metrology fields\n          manufacturer: normalizedLabel.manufacturer,\n          net_quantity: normalizedLabel.net_quantity,\n          mrp: normalizedLabel.MRP,\n          consumer_care: normalizedLabel.consumer_care,\n          date_of_manufacture: normalizedLabel.date_of_manufacture,\n          country_of_origin: normalizedLabel.country_of_origin,\n          \n          // Compliance results\n          compliance_score: normalizedLabel.compliance_score,\n          status: ['approved', 'failed', 'needs_review'].includes(normalizedLabel.status) \n            ? normalizedLabel.status \n            : 'needs_review', // Default fallback for unknown status\n          \n          // Technical metadata\n          ocr_confidence: normalizedLabel._ocr_confidence,\n          image_width: normalizedLabel._image_resolution?.width,\n          image_height: normalizedLabel._image_resolution?.height,\n          processing_time_ms: Date.now() - startTime,\n          \n          // Raw data\n          raw_data: normalizedLabel,\n          field_confidences: normalizedLabel._field_confidences,\n          extracted_text: normalizedLabel._extracted_text\n        };\n\n        // Store submission\n        db.insertSubmission(submissionData);\n        \n        // Store violations separately\n        if (normalizedLabel.violations && normalizedLabel.violations.length > 0) {\n          db.insertViolations(log.id, normalizedLabel.violations);\n        }\n\n        console.log('Submission stored in database:', log.id);\n      } catch (dbError) {\n        console.error('Failed to store submission in database:', dbError);\n        // Continue without failing the request - database storage is not critical for immediate response\n      }\n\n      return res.json(log);\n    } catch (err) {\n      // Clean up uploaded file on error\n      if (uploadedFilePath) {\n        await cleanupFile(uploadedFilePath);\n      }\n      \n      console.error('Compliance check error:', {\n        message: err.message,\n        stack: process.env.NODE_ENV !== 'production' ? err.stack : undefined,\n        timestamp: new Date().toISOString()\n      });\n      \n      const sanitizedError = sanitizeError(err);\n      const statusCode = err.message.includes('validation') || err.message.includes('Invalid') ? 400 : 500;\n      \n      res.status(statusCode).json({ \n        error: sanitizedError,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n);\n\n// Get submission history\napp.get('/api/submissions', async (req, res) => {\n  try {\n    const { limit = 50, offset = 0, user_id = 'demo_user' } = req.query;\n    \n    const submissions = db.getSubmissions(user_id, parseInt(limit), parseInt(offset));\n    \n    // Transform for frontend compatibility\n    const formattedSubmissions = submissions.map(sub => ({\n      id: sub.id,\n      product_preview: sub.product_name || 'Unknown product',\n      input_type: sub.input_type,\n      parsed: {\n        product_name: sub.product_name,\n        MRP: sub.raw_data.MRP,\n        manufacturer: sub.raw_data.manufacturer,\n        net_quantity: sub.raw_data.net_quantity,\n        country_of_origin: sub.raw_data.country_of_origin,\n        consumer_care: sub.raw_data.consumer_care,\n        date_of_manufacture: sub.raw_data.date_of_manufacture,\n        _ocr_confidence: sub.raw_data._ocr_confidence,\n        _image_resolution: sub.raw_data._image_resolution,\n        _field_confidences: sub.field_confidences\n      },\n      compliance_score: sub.compliance_score,\n      status: sub.status,\n      violations: [], // Will be populated if needed\n      timestamp: sub.timestamp,\n      highlight: sub.status === 'failed' || sub.compliance_score < 100\n    }));\n\n    res.json({\n      submissions: formattedSubmissions,\n      total: formattedSubmissions.length,\n      has_more: formattedSubmissions.length === parseInt(limit)\n    });\n  } catch (error) {\n    console.error('Failed to get submissions:', error);\n    res.status(500).json({ error: 'Failed to retrieve submissions' });\n  }\n});\n\n// Get single submission with full details\napp.get('/api/submissions/:id', async (req, res) => {\n  try {\n    const submission = db.getSubmissionById(req.params.id);\n    \n    if (!submission) {\n      return res.status(404).json({ error: 'Submission not found' });\n    }\n\n    // Transform for frontend compatibility\n    const formatted = {\n      id: submission.id,\n      product_preview: submission.product_name || 'Unknown product',\n      input_type: submission.input_type,\n      parsed: {\n        product_name: submission.product_name,\n        MRP: submission.raw_data.MRP,\n        manufacturer: submission.raw_data.manufacturer,\n        net_quantity: submission.raw_data.net_quantity,\n        country_of_origin: submission.raw_data.country_of_origin,\n        consumer_care: submission.raw_data.consumer_care,\n        date_of_manufacture: submission.raw_data.date_of_manufacture,\n        _ocr_confidence: submission.raw_data._ocr_confidence,\n        _image_resolution: submission.raw_data._image_resolution,\n        _field_confidences: submission.field_confidences\n      },\n      compliance_score: submission.compliance_score,\n      status: submission.status,\n      violations: submission.violations.map(v => v.message),\n      timestamp: submission.created_at,\n      highlight: submission.status === 'failed' || submission.compliance_score < 100\n    };\n\n    res.json(formatted);\n  } catch (error) {\n    console.error('Failed to get submission:', error);\n    res.status(500).json({ error: 'Failed to retrieve submission' });\n  }\n});\n\n// Analytics endpoints\napp.get('/api/analytics/trend', async (req, res) => {\n  try {\n    const { days = 30, user_id = 'demo_user' } = req.query;\n    const trendData = db.getComplianceTrend(user_id, parseInt(days));\n    \n    // Transform for recharts format\n    const formatted = trendData.map((item, index) => ({\n      x: index + 1,\n      compliance: Math.round(item.avg_score || 0),\n      date: item.date,\n      submissions: item.submissions\n    }));\n\n    res.json(formatted);\n  } catch (error) {\n    console.error('Failed to get trend data:', error);\n    res.status(500).json({ error: 'Failed to retrieve trend data' });\n  }\n});\n\napp.get('/api/analytics/brands', async (req, res) => {\n  try {\n    const { limit = 10, user_id = 'demo_user' } = req.query;\n    const brandData = db.getViolationsByBrand(user_id, parseInt(limit));\n    \n    // Transform for recharts format\n    const formatted = brandData.map(item => ({\n      brand: item.brand || 'Unknown',\n      violations: item.total_violations || 0,\n      submissions: item.total_submissions || 0,\n      avg_score: Math.round(item.avg_score || 0)\n    }));\n\n    res.json(formatted);\n  } catch (error) {\n    console.error('Failed to get brand data:', error);\n    res.status(500).json({ error: 'Failed to retrieve brand data' });\n  }\n});\n\napp.get('/api/analytics/stats', async (req, res) => {\n  try {\n    const { user_id = 'demo_user' } = req.query;\n    const stats = db.getOverallStats(user_id);\n    \n    res.json({\n      total_submissions: stats.total_submissions || 0,\n      avg_compliance_score: Math.round(stats.avg_compliance_score || 0),\n      approved_count: stats.approved_count || 0,\n      failed_count: stats.failed_count || 0,\n      needs_review_count: stats.needs_review_count || 0,\n      last_submission: stats.last_submission,\n      image_submissions: stats.image_submissions || 0,\n      url_submissions: stats.url_submissions || 0\n    });\n  } catch (error) {\n    console.error('Failed to get stats:', error);\n    res.status(500).json({ error: 'Failed to retrieve statistics' });\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'healthy', \n    timestamp: new Date().toISOString(),\n    version: '1.0.0'\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ error: 'Endpoint not found' });\n});\n\n// Global error handler\napp.use((err, req, res, next) => {\n  console.error('Unhandled error:', {\n    message: err.message,\n    stack: process.env.NODE_ENV !== 'production' ? err.stack : undefined,\n    timestamp: new Date().toISOString()\n  });\n  \n  const sanitizedError = sanitizeError(err);\n  res.status(500).json({ \n    error: sanitizedError,\n    timestamp: new Date().toISOString()\n  });\n});\n\nconst PORT = process.env.PORT || 8000;\napp.listen(PORT, 'localhost', () => {\n  console.log(`Server running on localhost:${PORT}`);\n  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n  console.log(`Security headers enabled: ${process.env.NODE_ENV === 'production' ? 'Yes' : 'Development mode'}`);\n});\n","size_bytes":43011},"frontend/vite.config.js":{"content":"import { defineConfig } from 'vite'\n\nexport default defineConfig({\n  esbuild: {\n    jsx: 'automatic'\n  },\n  css: {\n    postcss: { \n      plugins: [] // Disable auto-loaded PostCSS/Tailwind config\n    }\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    strictPort: true,\n    allowedHosts: true,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:8000',\n        changeOrigin: true,\n        secure: false\n      }\n    }\n  },\n  build: {\n    outDir: 'dist'\n  }\n})","size_bytes":477},"frontend/src/App.jsx":{"content":"// File: src/App.jsx\n// ComplianceApp component (single-file demo). Replace mockParseInput with real API calls in production.\nimport React, { useState, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer, BarChart, Bar } from 'recharts';\n\nexport default function ComplianceApp() {\n  const [view, setView] = useState('seller'); // seller | backend\n  const [submitting, setSubmitting] = useState(false);\n  const [result, setResult] = useState(null);\n  const [logs, setLogs] = useState(() => {\n    // Load submissions from localStorage on initialization\n    try {\n      const savedLogs = localStorage.getItem('compliscan_submissions');\n      return savedLogs ? JSON.parse(savedLogs) : [];\n    } catch (error) {\n      console.warn('Failed to load saved submissions:', error);\n      return [];\n    }\n  });\n  const [selectedSubmission, setSelectedSubmission] = useState(null);\n  const fileInputRef = useRef();\n  \n  // Analytics state\n  const [analyticsData, setAnalyticsData] = useState({\n    brands: [],\n    trend: [],\n    stats: {},\n    loading: false,\n    error: null\n  });\n\n  // Save submissions to localStorage whenever logs change\n  React.useEffect(() => {\n    try {\n      localStorage.setItem('compliscan_submissions', JSON.stringify(logs));\n    } catch (error) {\n      console.warn('Failed to save submissions:', error);\n    }\n  }, [logs]);\n\n  // Analytics API functions\n  async function fetchAnalytics() {\n    setAnalyticsData(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      const [brandsRes, trendRes, statsRes] = await Promise.all([\n        fetch('/api/analytics/brands'),\n        fetch('/api/analytics/trend'),\n        fetch('/api/analytics/stats')\n      ]);\n\n      if (!brandsRes.ok || !trendRes.ok || !statsRes.ok) {\n        throw new Error('Failed to fetch analytics data');\n      }\n\n      const [brands, trend, stats] = await Promise.all([\n        brandsRes.json(),\n        trendRes.json(),\n        statsRes.json()\n      ]);\n\n      setAnalyticsData({\n        brands,\n        trend,\n        stats,\n        loading: false,\n        error: null\n      });\n    } catch (error) {\n      console.error('Failed to fetch analytics:', error);\n      setAnalyticsData(prev => ({\n        ...prev,\n        loading: false,\n        error: error.message\n      }));\n    }\n  }\n\n  // Load analytics when switching to backend view\n  React.useEffect(() => {\n    if (view === 'backend') {\n      fetchAnalytics();\n    }\n  }, [view]);\n\n  // Mock rule engine run on parsed fields\n  function runRuleEngine(parsed) {\n    const required = ['product_name', 'MRP', 'manufacturer', 'net_quantity', 'country_of_origin'];\n    const violations = [];\n    required.forEach((k) => {\n      if (!parsed[k]) violations.push(`${k} missing`);\n    });\n\n    // Simple OCR quality checks\n    const reasons = [];\n    if (parsed._ocr_confidence && parsed._ocr_confidence < 0.6) reasons.push('Low OCR confidence (text unclear)');\n    if (parsed._image_resolution && (parsed._image_resolution.width < 400 || parsed._image_resolution.height < 300)) reasons.push('Low resolution image');\n\n    const score = Math.max(0, Math.round((1 - violations.length / required.length - (reasons.length * 0.05)) * 100));\n\n    const status = violations.length === 0 && reasons.length === 0 ? 'approved' : (reasons.length > 0 && violations.length === 0 ? 'rejected' : 'failed');\n\n    return {\n      compliance_score: score,\n      violations,\n      reasons,\n      status,\n    };\n  }\n\n  // Function to call the backend API\n  async function callBackendAPI({ type, file, url }) {\n    const backendUrl = `/api/check`;\n    \n    const formData = new FormData();\n    \n    if (type === 'url') {\n      if (!url || !url.startsWith('http')) throw new Error('Invalid URL');\n      formData.append('url', url);\n    } else if (type === 'image') {\n      if (!file) throw new Error('No file provided');\n      formData.append('image', file);\n    } else {\n      throw new Error('Unsupported type');\n    }\n\n    const response = await fetch(backendUrl, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Backend error: ${response.status}`);\n    }\n\n    const result = await response.json();\n    return result.parsed || result;\n  }\n\n  async function handleSubmit(event) {\n    event?.preventDefault?.();\n    setSubmitting(true);\n    setResult(null);\n    setSelectedSubmission(null); // Clear previous submission selection for new scans\n\n    try {\n      const file = fileInputRef.current?.files?.[0];\n      const url = event?.target?.url?.value?.trim();\n\n      if (!file && !url) {\n        alert('Please upload an image or paste a URL');\n        setSubmitting(false);\n        return;\n      }\n\n      const type = file ? 'image' : 'url';\n      const parsed = await callBackendAPI({ type, file, url });\n      const engine = runRuleEngine(parsed);\n\n      const log = {\n        id: `check_${Date.now()}`,\n        submitted_by: 'seller_demo',\n        product_preview: parsed.product_name || 'Unknown product',\n        input_type: type,\n        parsed,\n        ...engine,\n        timestamp: new Date().toISOString(),\n        highlight: engine.status === 'rejected' || engine.compliance_score < 100,\n      };\n\n      setResult(log);\n      setLogs((s) => [log, ...s]);\n\n    } catch (err) {\n      setResult({ status: 'rejected', reason: err.message, violations: [], compliance_score: 0 });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  // Simple visual helpers\n  function statusColor(status) {\n    if (status === 'approved') return 'bg-green-100 text-green-800';\n    if (status === 'failed') return 'bg-yellow-100 text-yellow-800';\n    return 'bg-red-100 text-red-800';\n  }\n\n  // Handle viewing a previous submission\n  function viewSubmission(submission) {\n    setResult(submission);\n    setSelectedSubmission(submission);\n  }\n\n  // Clear selected submission and reset to new scan mode\n  function clearSelection() {\n    setResult(null);\n    setSelectedSubmission(null);\n    if (fileInputRef.current) fileInputRef.current.value = null;\n  }\n\n  // Analytics data - use real backend data when available, fallback to local logs\n  const trendData = analyticsData.trend.length > 0 \n    ? analyticsData.trend \n    : logs.slice(0, 12).reverse().map((l, i) => ({ x: i + 1, compliance: l.compliance_score }));\n    \n  const brandViolations = analyticsData.brands.length > 0 \n    ? analyticsData.brands\n    : [{ brand: 'DemoLabs', violations: logs.filter(l => l.parsed?.manufacturer?.toLowerCase()?.includes('demolabs')).length }, { brand: 'SkinCo Labs', violations: logs.filter(l => l.parsed?.manufacturer?.toLowerCase()?.includes('skinco')).length }];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <header className=\"max-w-6xl mx-auto mb-6 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-xl flex items-center justify-center shadow-lg\">\n            <span className=\"text-white font-bold text-xl\">📊</span>\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold bg-gradient-to-r from-emerald-300 to-blue-300 bg-clip-text text-transparent\">\n              CompliScan\n            </h1>\n            <p className=\"text-white/70 text-sm\">Legal Metrology Compliance Checker</p>\n          </div>\n        </div>\n        <div className=\"space-x-2\">\n          <button \n            onClick={() => setView('seller')} \n            className={`px-4 py-2 rounded-xl transition-all duration-300 transform hover:scale-105 ${\n              view==='seller' \n                ? 'bg-gradient-to-r from-emerald-500 to-blue-500 text-white shadow-lg' \n                : 'bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30'\n            }`}\n          >\n            🏪 Seller View\n          </button>\n          <button \n            onClick={() => setView('backend')} \n            className={`px-4 py-2 rounded-xl transition-all duration-300 transform hover:scale-105 ${\n              view==='backend' \n                ? 'bg-gradient-to-r from-emerald-500 to-blue-500 text-white shadow-lg' \n                : 'bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30'\n            }`}\n          >\n            📈 Analytics\n          </button>\n        </div>\n      </header>\n\n      <main className=\"max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Left column: form or filters */}\n        <section className=\"col-span-1 md:col-span-1\">\n          {view === 'seller' ? (\n            <div className=\"bg-white rounded-xl shadow-lg p-6 transition-all duration-500 hover:shadow-2xl hover:scale-[1.02]\">\n              <div className=\"bg-gradient-to-r from-emerald-50 to-blue-50 p-4 rounded-lg mb-6 border border-emerald-100\">\n                <h2 className=\"text-lg font-semibold text-gray-800 mb-2 flex items-center\">\n                  <span className=\"mr-2\">🔍</span>\n                  CompliScan Checker\n                </h2>\n                <p className=\"text-sm text-gray-600\">\n                  Instantly verify all 6 mandatory Legal Metrology requirements. Upload product images or paste URLs from any e-commerce platform.\n                </p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-200 hover:border-emerald-300 transition-all duration-300 hover:bg-emerald-50\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2 flex items-center\">\n                    <span className=\"mr-2\">📷</span>\n                    Product Image\n                  </label>\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-emerald-50 file:text-emerald-700 hover:file:bg-emerald-100 transition-all duration-200\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">JPG, PNG, GIF, WebP (max 10MB)</p>\n                </div>\n\n                <div className=\"text-center\">\n                  <div className=\"relative\">\n                    <div className=\"absolute inset-0 flex items-center\">\n                      <div className=\"w-full border-t border-gray-200\"></div>\n                    </div>\n                    <div className=\"relative flex justify-center text-sm\">\n                      <span className=\"px-3 bg-white text-gray-500 rounded-full\">OR</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-200 hover:border-emerald-300 transition-all duration-300 hover:bg-emerald-50\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2 flex items-center\">\n                    <span className=\"mr-2\">🔗</span>\n                    Product URL\n                  </label>\n                  <input\n                    name=\"url\"\n                    type=\"text\"\n                    placeholder=\"https://amazon.in | flipkart.com | myntra.com\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent text-sm transition-all duration-200\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">Any e-commerce website URL</p>\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <button\n                    type=\"submit\"\n                    disabled={submitting}\n                    className=\"flex-1 bg-gradient-to-r from-emerald-600 to-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:from-emerald-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 hover:shadow-lg\"\n                  >\n                    {submitting ? (\n                      <div className=\"flex items-center justify-center\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        <span className=\"animate-pulse\">Analyzing with AI...</span>\n                      </div>\n                    ) : (\n                      '🚀 Scan Now'\n                    )}\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => { \n                      if (fileInputRef.current) fileInputRef.current.value = null; \n                      setResult(null);\n                      setSelectedSubmission(null); // Clear selection state\n                    }}\n                    className=\"px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-all duration-200 transform hover:scale-105\"\n                  >\n                    Clear\n                  </button>\n                </div>\n              </form>\n\n              {/* Quick status summary in sidebar */}\n              {result && (\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h3 className=\"text-sm font-semibold text-gray-700\">\n                      {selectedSubmission ? '📋 Viewing Previous Scan' : '✨ Latest Scan'}\n                    </h3>\n                    {selectedSubmission && (\n                      <button\n                        onClick={clearSelection}\n                        className=\"text-xs text-blue-600 hover:text-blue-800 underline\"\n                      >\n                        New Scan\n                      </button>\n                    )}\n                  </div>\n                  <div className={`p-4 rounded-lg ${\n                    result.status === 'approved' ? 'bg-green-50 border border-green-200' : \n                    result.status === 'failed' ? 'bg-yellow-50 border border-yellow-200' : \n                    'bg-red-50 border border-red-200'\n                  }`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`font-semibold ${\n                        result.status === 'approved' ? 'text-green-800' : \n                        result.status === 'failed' ? 'text-yellow-800' : 'text-red-800'\n                      }`}>\n                        {result.status === 'approved' ? '✓ Compliant' : \n                         result.status === 'failed' ? '⚠ Needs Review' : '✗ Non-Compliant'}\n                      </span>\n                      <span className=\"text-sm font-medium\">{result.compliance_score}%</span>\n                    </div>\n                    {result.violations?.length > 0 && (\n                      <p className=\"text-xs text-gray-600\">\n                        {result.violations.length} issue{result.violations.length !== 1 ? 's' : ''} found\n                      </p>\n                    )}\n                    {selectedSubmission && (\n                      <p className=\"text-xs text-gray-500 mt-2\">\n                        📅 {new Date(selectedSubmission.timestamp).toLocaleString()}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div>\n              <h2 className=\"font-semibold mb-2\">Filters</h2>\n              <p className=\"text-sm text-gray-600\">Filter the backend panel by status, date, seller, etc. (demo-only UI)</p>\n            </div>\n          )}\n        </section>\n\n        {/* Middle column: comprehensive compliance results */}\n        <section className=\"col-span-2 md:col-span-2\">\n          {view === 'seller' ? (\n            <div className=\"space-y-6\">\n              {result ? (\n                <>\n                  {/* Status Header */}\n                  <div className=\"bg-white rounded-xl shadow-lg p-6 border-l-4 border-emerald-500 animate-fadeIn\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white text-xl font-bold transition-all duration-500 transform hover:scale-110 ${\n                          result.status === 'approved' ? 'bg-gradient-to-br from-emerald-500 to-green-600' : \n                          result.status === 'failed' ? 'bg-gradient-to-br from-yellow-500 to-orange-600' : 'bg-gradient-to-br from-red-500 to-pink-600'\n                        }`}>\n                          {result.status === 'approved' ? '✓' : result.status === 'failed' ? '⚠' : '✗'}\n                        </div>\n                        <div>\n                          <h3 className=\"text-xl font-bold text-gray-800 animate-slideIn\">\n                            {result.status === 'approved' ? '✅ Fully Compliant' : \n                             result.status === 'failed' ? '⚠️ Needs Review' : '❌ Non-Compliant'}\n                          </h3>\n                          <p className=\"text-gray-600\">CompliScan Score: {result.compliance_score}%</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-3xl font-bold bg-gradient-to-r from-emerald-600 to-blue-600 bg-clip-text text-transparent animate-pulse\">\n                          {result.compliance_score}%\n                        </div>\n                        <div className=\"text-sm text-gray-500\">Legal Metrology</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Product Information Card */}\n                  <div className=\"bg-white rounded-xl shadow-lg overflow-hidden animate-slideUp\">\n                    <div className=\"bg-gradient-to-r from-emerald-50 to-blue-50 px-6 py-4 border-b\">\n                      <h4 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                        <span className=\"mr-2\">📦</span>\n                        Legal Metrology Fields\n                      </h4>\n                    </div>\n                    <div className=\"p-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                            <span className=\"font-medium text-gray-600\">Product Name:</span>\n                            <span className=\"text-gray-800 text-right max-w-xs truncate\" title={result.parsed?.product_name}>\n                              {result.parsed?.product_name || '❌ Missing'}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                            <span className=\"font-medium text-gray-600\">MRP:</span>\n                            <span className=\"text-gray-800\">{result.parsed?.MRP || '❌ Missing'}</span>\n                          </div>\n                          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                            <span className=\"font-medium text-gray-600\">Manufacturer:</span>\n                            <span className=\"text-gray-800\">{result.parsed?.manufacturer || '❌ Missing'}</span>\n                          </div>\n                        </div>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                            <span className=\"font-medium text-gray-600\">Net Quantity:</span>\n                            <span className=\"text-gray-800\">{result.parsed?.net_quantity || '❌ Missing'}</span>\n                          </div>\n                          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                            <span className=\"font-medium text-gray-600\">Country of Origin:</span>\n                            <span className=\"text-gray-800\">{result.parsed?.country_of_origin || '❌ Missing'}</span>\n                          </div>\n                          {result.parsed?.ai_enhanced && (\n                            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                              <span className=\"font-medium text-purple-600\">AI Enhanced:</span>\n                              <span className=\"text-purple-600\">✨ Yes</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Violations & Issues */}\n                  {(result.violations?.length > 0 || result.reasons?.length > 0) && (\n                    <div className=\"bg-white rounded-xl shadow-lg overflow-hidden animate-bounceIn\">\n                      <div className=\"bg-gradient-to-r from-red-50 to-pink-50 px-6 py-4 border-b border-red-100\">\n                        <h4 className=\"text-lg font-semibold text-red-800 flex items-center\">\n                          <span className=\"mr-2 animate-pulse\">⚠️</span>\n                          CompliScan Issues Detected\n                        </h4>\n                      </div>\n                      <div className=\"p-6 space-y-4\">\n                        {result.violations?.length > 0 && (\n                          <div>\n                            <h5 className=\"font-semibold text-gray-800 mb-2\">Compliance Violations:</h5>\n                            <ul className=\"space-y-2\">\n                              {result.violations.map((violation, i) => (\n                                <li key={i} className=\"flex items-center space-x-2 text-red-600\">\n                                  <span className=\"w-2 h-2 bg-red-500 rounded-full\"></span>\n                                  <span>{violation}</span>\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                        {result.reasons?.length > 0 && (\n                          <div>\n                            <h5 className=\"font-semibold text-gray-800 mb-2\">Quality Issues:</h5>\n                            <ul className=\"space-y-2\">\n                              {result.reasons.map((reason, i) => (\n                                <li key={i} className=\"flex items-center space-x-2 text-yellow-600\">\n                                  <span className=\"w-2 h-2 bg-yellow-500 rounded-full\"></span>\n                                  <span>{reason}</span>\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Action Buttons - Redesigned */}\n                  <div className=\"bg-white rounded-xl shadow-lg p-6\">\n                    <h4 className=\"text-lg font-semibold text-gray-800 mb-4\">🚀 Next Steps</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <button className=\"flex flex-col items-center p-4 border-2 border-green-200 rounded-lg hover:border-green-400 hover:bg-green-50 transition-all group\">\n                        <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-2 group-hover:bg-green-200\">\n                          <span className=\"text-green-600 text-xl\">✓</span>\n                        </div>\n                        <span className=\"font-medium text-green-700\">Approve Product</span>\n                        <span className=\"text-xs text-gray-500 text-center mt-1\">Product meets all requirements</span>\n                      </button>\n                      \n                      <button className=\"flex flex-col items-center p-4 border-2 border-yellow-200 rounded-lg hover:border-yellow-400 hover:bg-yellow-50 transition-all group\">\n                        <div className=\"w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center mb-2 group-hover:bg-yellow-200\">\n                          <span className=\"text-yellow-600 text-xl\">📝</span>\n                        </div>\n                        <span className=\"font-medium text-yellow-700\">Request Fix</span>\n                        <span className=\"text-xs text-gray-500 text-center mt-1\">Ask seller to update product info</span>\n                      </button>\n                      \n                      <button className=\"flex flex-col items-center p-4 border-2 border-purple-200 rounded-lg hover:border-purple-400 hover:bg-purple-50 transition-all group\">\n                        <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mb-2 group-hover:bg-purple-200\">\n                          <span className=\"text-purple-600 text-xl\">👥</span>\n                        </div>\n                        <span className=\"font-medium text-purple-700\">Manual Review</span>\n                        <span className=\"text-xs text-gray-500 text-center mt-1\">Send to compliance team</span>\n                      </button>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <div className=\"bg-white rounded-xl shadow-lg p-12 text-center animate-fadeIn\">\n                  <div className=\"w-24 h-24 bg-gradient-to-br from-emerald-100 to-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 transition-all duration-300 hover:scale-110\">\n                    <span className=\"text-emerald-500 text-3xl animate-bounce\">🔍</span>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">Ready to Scan with CompliScan</h3>\n                  <p className=\"text-gray-600\">Upload a product image or paste an e-commerce URL to instantly verify all 6 mandatory Legal Metrology requirements.</p>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"bg-white p-4 rounded shadow\">\n                <h3 className=\"font-semibold mb-3\">Compliance Trend</h3>\n                {trendData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={200}>\n                    <LineChart data={trendData}>\n                      <XAxis dataKey=\"x\" />\n                      <YAxis />\n                      <Tooltip />\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <Line type=\"monotone\" dataKey=\"compliance\" stroke=\"#2563eb\" strokeWidth={2} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"text-sm text-gray-600\">No data yet.</div>\n                )}\n              </div>\n\n              <div className=\"bg-white p-4 rounded shadow\">\n                <h3 className=\"font-semibold mb-3 flex items-center justify-between\">\n                  Violations by Brand\n                  {analyticsData.loading && (\n                    <div className=\"text-xs text-blue-500 flex items-center\">\n                      <div className=\"w-3 h-3 border border-blue-500 border-t-transparent rounded-full animate-spin mr-2\"></div>\n                      Loading...\n                    </div>\n                  )}\n                </h3>\n                {analyticsData.error ? (\n                  <div className=\"text-sm text-red-600 p-2 bg-red-50 rounded\">\n                    Error: {analyticsData.error}\n                  </div>\n                ) : brandViolations.length > 0 && brandViolations.some(b => b.violations > 0) ? (\n                  <ResponsiveContainer width=\"100%\" height={200}>\n                    <BarChart data={brandViolations}>\n                      <XAxis dataKey=\"brand\" />\n                      <YAxis />\n                      <Tooltip formatter={(value, name) => [value, name === 'violations' ? 'Violations' : name]} />\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <Bar dataKey=\"violations\" fill=\"#ef4444\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"text-sm text-gray-600\">\n                    {analyticsData.loading ? 'Loading violations data...' : 'No violations yet.'}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Bottom: submission logs */}\n          <div className=\"bg-white rounded-xl shadow-lg p-6 mt-6 transition-all duration-300 hover:shadow-xl\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                <span className=\"mr-2\">📋</span>\n                Submission History ({logs.length})\n              </h3>\n              {logs.length > 0 && (\n                <button\n                  onClick={() => {\n                    if (confirm('Clear all submission history? This cannot be undone.')) {\n                      setLogs([]);\n                      setResult(null);\n                      setSelectedSubmission(null);\n                    }\n                  }}\n                  className=\"text-xs text-red-600 hover:text-red-800 underline\"\n                >\n                  Clear All\n                </button>\n              )}\n            </div>\n            {logs.length > 0 ? (\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {logs.map((log) => (\n                  <div \n                    key={log.id} \n                    onClick={() => viewSubmission(log)}\n                    className={`p-4 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md hover:border-emerald-300 ${\n                      selectedSubmission?.id === log.id \n                        ? 'border-emerald-500 bg-emerald-50' \n                        : log.highlight \n                          ? 'border-red-200 bg-red-50 hover:bg-red-100' \n                          : 'border-gray-200 hover:bg-gray-50'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between text-sm mb-2\">\n                      <span className=\"font-medium text-gray-800 flex items-center\">\n                        <span className=\"mr-2\">\n                          {log.input_type === 'image' ? '📷' : '🔗'}\n                        </span>\n                        {log.product_preview}\n                      </span>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColor(log.status)}`}>\n                        {log.status}\n                      </span>\n                    </div>\n                    <div className=\"text-xs text-gray-500 flex items-center justify-between\">\n                      <span>\n                        📅 {new Date(log.timestamp).toLocaleString()}\n                      </span>\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"font-medium\">\n                          🎯 Score: {log.compliance_score}%\n                        </span>\n                        {log.violations?.length > 0 && (\n                          <span className=\"text-red-600\">\n                            ⚠️ {log.violations.length} issue{log.violations.length !== 1 ? 's' : ''}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    {selectedSubmission?.id === log.id && (\n                      <div className=\"mt-2 pt-2 border-t border-emerald-200\">\n                        <span className=\"text-xs text-emerald-700 font-medium\">\n                          👆 Currently viewing this submission\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <span className=\"text-gray-400 text-xl\">📋</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">No submissions yet.</p>\n                <p className=\"text-xs text-gray-500 mt-1\">Your scan history will appear here</p>\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n","size_bytes":32927},"frontend/src/main.jsx":{"content":"import React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport ComplianceApp from './App'\nimport './styles.css'\n\ncreateRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <ComplianceApp />\n  </React.StrictMode>\n)\n","size_bytes":248},"frontend/src/styles.css":{"content":"/* Modern Compliance Dashboard - Beautiful UI Design */\n\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n/* Reset and base styles */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  min-height: 100vh;\n  line-height: 1.6;\n}\n\n/* Main container - CompliScan Theme */\n.min-h-screen {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #10b981 0%, #3b82f6 50%, #8b5cf6 100%);\n  background-size: 400% 400%;\n  animation: gradientShift 15s ease infinite;\n  padding: 2rem 1rem;\n}\n\n@keyframes gradientShift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n.bg-gray-50 {\n  background: transparent;\n}\n\n/* Layout utilities */\n.max-w-6xl {\n  max-width: 80rem;\n  margin: 0 auto;\n}\n\n.grid {\n  display: grid;\n}\n\n.grid-cols-1 {\n  grid-template-columns: 1fr;\n}\n\n.gap-6 {\n  gap: 2rem;\n}\n\n.flex {\n  display: flex;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.justify-between {\n  justify-content: space-between;\n}\n\n/* Header styling */\nheader {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 20px;\n  padding: 1.5rem 2rem;\n  margin-bottom: 2rem;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.text-2xl {\n  font-size: 2rem;\n  font-weight: 700;\n  color: white;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.font-bold {\n  font-weight: 700;\n}\n\n/* Navigation buttons */\n.space-x-2 > * + * {\n  margin-left: 0.75rem;\n}\n\nbutton {\n  font-family: inherit;\n  font-weight: 500;\n  border: none;\n  border-radius: 12px;\n  padding: 0.75rem 1.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  text-decoration: none;\n  display: inline-flex;\n  align-items: center;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.bg-blue-600 {\n  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n  color: white;\n}\n\n.bg-blue-600:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);\n}\n\n.bg-white {\n  background: rgba(255, 255, 255, 0.9);\n  color: #374151;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n}\n\n.bg-white:hover {\n  background: white;\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(255, 255, 255, 0.2);\n}\n\n/* Card styling */\n.bg-white.shadow, .shadow {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-radius: 20px;\n  padding: 2rem;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.bg-white.shadow:hover, .shadow:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n}\n\n/* Typography */\n.font-semibold {\n  font-weight: 600;\n  color: #1f2937;\n}\n\n.text-sm {\n  font-size: 0.875rem;\n}\n\n.text-xs {\n  font-size: 0.75rem;\n}\n\n.font-medium {\n  font-weight: 500;\n}\n\n.text-gray-600 {\n  color: #6b7280;\n}\n\n.text-gray-500 {\n  color: #9ca3af;\n}\n\n.text-white {\n  color: white;\n}\n\n/* Form styling */\n.block {\n  display: block;\n}\n\n.w-full {\n  width: 100%;\n}\n\n.mt-1 {\n  margin-top: 0.5rem;\n}\n\n.mb-2 {\n  margin-bottom: 0.75rem;\n}\n\n.mb-3 {\n  margin-bottom: 1rem;\n}\n\n.mt-2 {\n  margin-top: 0.75rem;\n}\n\n.mt-3 {\n  margin-top: 1rem;\n}\n\n.mt-4 {\n  margin-top: 1.5rem;\n}\n\n.mb-6 {\n  margin-bottom: 2rem;\n}\n\ninput[type=\"file\"], input[type=\"text\"] {\n  width: 100%;\n  padding: 0.875rem 1rem;\n  border: 2px solid rgba(209, 213, 219, 0.3);\n  border-radius: 12px;\n  font-size: 0.875rem;\n  background: rgba(255, 255, 255, 0.9);\n  transition: all 0.3s ease;\n  margin-top: 0.5rem;\n}\n\ninput[type=\"file\"]:focus, input[type=\"text\"]:focus {\n  outline: none;\n  border-color: #3b82f6;\n  background: white;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\nlabel {\n  display: block;\n  font-weight: 500;\n  color: #374151;\n  margin-bottom: 0.5rem;\n}\n\n/* Status badges */\n.bg-green-100 {\n  background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);\n  border: 1px solid #86efac;\n}\n\n.text-green-800 {\n  color: #166534;\n  font-weight: 600;\n}\n\n.bg-yellow-100 {\n  background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);\n  border: 1px solid #fbbf24;\n}\n\n.text-yellow-800 {\n  color: #92400e;\n  font-weight: 600;\n}\n\n.bg-red-100 {\n  background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);\n  border: 1px solid #f87171;\n}\n\n.text-red-800 {\n  color: #991b1b;\n  font-weight: 600;\n}\n\n/* Action buttons */\n.bg-green-600 {\n  background: linear-gradient(135deg, #10b981 0%, #059669 100%);\n  color: white;\n}\n\n.bg-green-600:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);\n}\n\n.bg-yellow-500 {\n  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);\n  color: white;\n}\n\n.bg-yellow-500:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(245, 158, 11, 0.3);\n}\n\n.bg-red-600 {\n  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\n  color: white;\n}\n\n.bg-red-600:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);\n}\n\n/* Table styling */\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\n\ntd {\n  padding: 0.75rem 0;\n  border-bottom: 1px solid rgba(229, 231, 235, 0.5);\n}\n\ntd:first-child {\n  font-weight: 500;\n  color: #374151;\n  width: 40%;\n}\n\ntd:last-child {\n  color: #6b7280;\n}\n\n/* List styling */\n.list-disc {\n  list-style-type: disc;\n}\n\n.list-inside {\n  list-style-position: inside;\n}\n\n.space-y-2 > * + * {\n  margin-top: 0.75rem;\n}\n\n/* Layout spacing */\n.p-2 {\n  padding: 0.5rem;\n}\n\n.p-3 {\n  padding: 1rem;\n}\n\n.p-4 {\n  padding: 1.5rem;\n}\n\n.p-6 {\n  padding: 2rem;\n}\n\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.rounded {\n  border-radius: 8px;\n}\n\n/* Scrollable areas */\n.max-h-96 {\n  max-height: 24rem;\n}\n\n.overflow-y-auto {\n  overflow-y: auto;\n}\n\n.overflow-y-auto::-webkit-scrollbar {\n  width: 6px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-track {\n  background: rgba(243, 244, 246, 0.5);\n  border-radius: 3px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n  border-radius: 3px;\n}\n\n/* Borders and highlights */\n.border {\n  border: 1px solid rgba(229, 231, 235, 0.3);\n}\n\n.border-red-200 {\n  border-color: rgba(254, 202, 202, 0.8);\n}\n\n.bg-red-50 {\n  background: rgba(254, 242, 242, 0.8);\n}\n\n.border-gray-200 {\n  border-color: rgba(229, 231, 235, 0.3);\n}\n\n/* Responsive design */\n@media (min-width: 768px) {\n  .md\\:grid-cols-3 {\n    grid-template-columns: 1fr 2fr;\n  }\n  \n  .md\\:grid-cols-2 {\n    grid-template-columns: 1fr 1fr;\n  }\n  \n  .md\\:col-span-1 {\n    grid-column: span 1;\n  }\n  \n  .md\\:col-span-2 {\n    grid-column: span 2;\n  }\n  \n  .gap-6 {\n    gap: 2.5rem;\n  }\n  \n  .p-6 {\n    padding: 2.5rem;\n  }\n}\n\n/* Loading states and animations */\nbutton:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none !important;\n}\n\n/* Chart container styling */\n.recharts-wrapper {\n  border-radius: 12px;\n  overflow: hidden;\n}\n\n/* Custom enhancements */\n.status-badge {\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  font-size: 0.75rem;\n  font-weight: 600;\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem;\n}\n\n.compliance-card {\n  background: rgba(255, 255, 255, 0.95);\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n}\n\n.compliance-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n}\n\n/* Form enhancements */\n.form-section {\n  background: rgba(255, 255, 255, 0.95);\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n}\n\n/* Animation classes */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slideIn {\n  from { opacity: 0; transform: translateX(-30px); }\n  to { opacity: 1; transform: translateX(0); }\n}\n\n@keyframes slideUp {\n  from { opacity: 0; transform: translateY(30px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes bounceIn {\n  0% { opacity: 0; transform: scale(0.3); }\n  50% { opacity: 0.8; transform: scale(1.05); }\n  70% { transform: scale(0.9); }\n  100% { opacity: 1; transform: scale(1); }\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% { transform: translateY(0); }\n  40%, 43% { transform: translateY(-10px); }\n  70% { transform: translateY(-5px); }\n  90% { transform: translateY(-2px); }\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.animate-fadeIn {\n  animation: fadeIn 0.6s ease-out;\n}\n\n.animate-slideIn {\n  animation: slideIn 0.5s ease-out;\n}\n\n.animate-slideUp {\n  animation: slideUp 0.7s ease-out;\n}\n\n.animate-bounceIn {\n  animation: bounceIn 0.8s ease-out;\n}\n\n.animate-pulse {\n  animation: pulse 2s infinite;\n}\n\n.animate-bounce {\n  animation: bounce 2s infinite;\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n.fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n/* Glassmorphism effect */\n.glass {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  border-radius: 20px;\n}\n\n/* Success/Error states */\n.success-state {\n  background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);\n  border: 1px solid #86efac;\n  color: #166534;\n}\n\n.error-state {\n  background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);\n  border: 1px solid #f87171;\n  color: #991b1b;\n}\n\n.warning-state {\n  background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);\n  border: 1px solid #fbbf24;\n  color: #92400e;\n}","size_bytes":10034},"backend/database.js":{"content":"/**\n * CompliScan Database Module\n * SQLite database for persistent storage of submissions, violations, and metrics\n */\n\nconst Database = require('better-sqlite3');\nconst path = require('path');\nconst fs = require('fs');\n\n// Ensure database directory exists\nconst dbDir = path.join(__dirname, 'data');\nif (!fs.existsSync(dbDir)) {\n  fs.mkdirSync(dbDir, { recursive: true });\n}\n\nconst dbPath = path.join(dbDir, 'compliscan.db');\nconst db = new Database(dbPath);\n\n// Enable WAL mode for better performance and concurrency\ndb.pragma('journal_mode = WAL');\ndb.pragma('synchronous = NORMAL');\ndb.pragma('cache_size = 1000');\ndb.pragma('foreign_keys = ON');\n\n// Database Schema\nconst schema = `\n-- Submissions table - main compliance check records\nCREATE TABLE IF NOT EXISTS submissions (\n  id TEXT PRIMARY KEY,\n  user_id TEXT DEFAULT 'demo_user',\n  product_name TEXT,\n  input_type TEXT NOT NULL CHECK (input_type IN ('image', 'url')),\n  input_source TEXT, -- URL or original filename\n  \n  -- Legal Metrology Fields (6 mandatory)\n  manufacturer TEXT,\n  net_quantity TEXT,\n  mrp TEXT,\n  consumer_care TEXT,\n  date_of_manufacture TEXT,\n  country_of_origin TEXT,\n  \n  -- Compliance Results\n  compliance_score INTEGER NOT NULL DEFAULT 0,\n  status TEXT NOT NULL CHECK (status IN ('approved', 'failed', 'needs_review')),\n  \n  -- Technical Metadata\n  ocr_confidence REAL,\n  image_width INTEGER,\n  image_height INTEGER,\n  processing_time_ms INTEGER,\n  \n  -- Audit Fields\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  \n  -- Raw Data (JSON)\n  raw_data TEXT, -- Full parsed data as JSON\n  field_confidences TEXT, -- Field-level confidence scores as JSON\n  extracted_text TEXT -- OCR extracted text sample\n);\n\n-- Violations table - detailed compliance issues\nCREATE TABLE IF NOT EXISTS violations (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  submission_id TEXT NOT NULL,\n  field_name TEXT NOT NULL,\n  violation_type TEXT NOT NULL CHECK (violation_type IN ('missing', 'format', 'invalid')),\n  severity TEXT NOT NULL CHECK (severity IN ('low', 'medium', 'high')),\n  message TEXT NOT NULL,\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  \n  FOREIGN KEY (submission_id) REFERENCES submissions(id) ON DELETE CASCADE\n);\n\n-- Analytics views for metrics\nCREATE TABLE IF NOT EXISTS analytics_cache (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  metric_name TEXT NOT NULL UNIQUE,\n  metric_value TEXT NOT NULL, -- JSON data\n  calculated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_submissions_created_at ON submissions(created_at);\nCREATE INDEX IF NOT EXISTS idx_submissions_status ON submissions(status);\nCREATE INDEX IF NOT EXISTS idx_submissions_user_id ON submissions(user_id);\nCREATE INDEX IF NOT EXISTS idx_violations_submission_id ON violations(submission_id);\nCREATE INDEX IF NOT EXISTS idx_violations_field_name ON violations(field_name);\nCREATE INDEX IF NOT EXISTS idx_violations_severity ON violations(severity);\n`;\n\n// Initialize database schema\nfunction initializeDatabase() {\n  console.log('Initializing CompliScan database...');\n  \n  try {\n    // Execute schema creation\n    db.exec(schema);\n    \n    // Update database version\n    db.prepare(`\n      CREATE TABLE IF NOT EXISTS db_version (\n        version INTEGER PRIMARY KEY,\n        applied_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `).run();\n    \n    const currentVersion = db.prepare('SELECT MAX(version) as version FROM db_version').get();\n    if (!currentVersion.version) {\n      db.prepare('INSERT INTO db_version (version) VALUES (1)').run();\n      console.log('Database initialized with schema version 1');\n    }\n    \n    console.log('Database initialization completed successfully');\n    return true;\n  } catch (error) {\n    console.error('Database initialization failed:', error);\n    throw error;\n  }\n}\n\n// Database Operations\nconst operations = {\n  \n  // Store a new submission\n  insertSubmission(submissionData) {\n    const stmt = db.prepare(`\n      INSERT INTO submissions (\n        id, user_id, product_name, input_type, input_source,\n        manufacturer, net_quantity, mrp, consumer_care, date_of_manufacture, country_of_origin,\n        compliance_score, status, ocr_confidence, image_width, image_height, processing_time_ms,\n        raw_data, field_confidences, extracted_text\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    \n    return stmt.run(\n      submissionData.id,\n      submissionData.user_id || 'demo_user',\n      submissionData.product_name,\n      submissionData.input_type,\n      submissionData.input_source,\n      submissionData.manufacturer,\n      submissionData.net_quantity,\n      submissionData.mrp,\n      submissionData.consumer_care,\n      submissionData.date_of_manufacture,\n      submissionData.country_of_origin,\n      submissionData.compliance_score,\n      submissionData.status,\n      submissionData.ocr_confidence,\n      submissionData.image_width,\n      submissionData.image_height,\n      submissionData.processing_time_ms,\n      JSON.stringify(submissionData.raw_data),\n      JSON.stringify(submissionData.field_confidences),\n      submissionData.extracted_text\n    );\n  },\n  \n  // Store violations for a submission\n  insertViolations(submissionId, violations) {\n    if (!violations || violations.length === 0) return;\n    \n    const stmt = db.prepare(`\n      INSERT INTO violations (submission_id, field_name, violation_type, severity, message)\n      VALUES (?, ?, ?, ?, ?)\n    `);\n    \n    const transaction = db.transaction((violations) => {\n      for (const violation of violations) {\n        stmt.run(\n          submissionId,\n          violation.field,\n          violation.type,\n          violation.severity,\n          violation.message\n        );\n      }\n    });\n    \n    return transaction(violations);\n  },\n  \n  // Get submission history\n  getSubmissions(userId = 'demo_user', limit = 50, offset = 0) {\n    const stmt = db.prepare(`\n      SELECT \n        id, product_name, input_type, input_source,\n        compliance_score, status, created_at,\n        raw_data, field_confidences\n      FROM submissions \n      WHERE user_id = ?\n      ORDER BY created_at DESC \n      LIMIT ? OFFSET ?\n    `);\n    \n    const rows = stmt.all(userId, limit, offset);\n    \n    // Parse JSON fields\n    return rows.map(row => ({\n      ...row,\n      raw_data: JSON.parse(row.raw_data || '{}'),\n      field_confidences: JSON.parse(row.field_confidences || '{}'),\n      timestamp: row.created_at\n    }));\n  },\n  \n  // Get single submission with violations\n  getSubmissionById(submissionId) {\n    const submissionStmt = db.prepare(`\n      SELECT * FROM submissions WHERE id = ?\n    `);\n    \n    const violationsStmt = db.prepare(`\n      SELECT field_name, violation_type, severity, message, created_at\n      FROM violations \n      WHERE submission_id = ?\n      ORDER BY severity DESC, field_name ASC\n    `);\n    \n    const submission = submissionStmt.get(submissionId);\n    if (!submission) return null;\n    \n    const violations = violationsStmt.all(submissionId);\n    \n    return {\n      ...submission,\n      raw_data: JSON.parse(submission.raw_data || '{}'),\n      field_confidences: JSON.parse(submission.field_confidences || '{}'),\n      violations: violations.map(v => ({\n        field: v.field_name,\n        type: v.violation_type,\n        severity: v.severity,\n        message: v.message\n      }))\n    };\n  },\n  \n  // Analytics operations\n  getComplianceTrend(userId = 'demo_user', days = 30) {\n    const stmt = db.prepare(`\n      SELECT \n        DATE(created_at) as date,\n        AVG(compliance_score) as avg_score,\n        COUNT(*) as submissions\n      FROM submissions \n      WHERE user_id = ? AND created_at >= datetime('now', '-' || ? || ' days')\n      GROUP BY DATE(created_at)\n      ORDER BY date ASC\n    `);\n    \n    return stmt.all(userId, days);\n  },\n  \n  getViolationsByBrand(userId = 'demo_user', limit = 10) {\n    const stmt = db.prepare(`\n      SELECT \n        manufacturer as brand,\n        COUNT(DISTINCT s.id) as total_submissions,\n        COUNT(v.id) as total_violations,\n        AVG(s.compliance_score) as avg_score\n      FROM submissions s\n      LEFT JOIN violations v ON s.id = v.submission_id\n      WHERE s.user_id = ? AND s.manufacturer IS NOT NULL\n      GROUP BY s.manufacturer\n      HAVING COUNT(DISTINCT s.id) > 0\n      ORDER BY total_violations DESC, total_submissions DESC\n      LIMIT ?\n    `);\n    \n    return stmt.all(userId, limit);\n  },\n  \n  getOverallStats(userId = 'demo_user') {\n    const stmt = db.prepare(`\n      SELECT \n        COUNT(*) as total_submissions,\n        AVG(compliance_score) as avg_compliance_score,\n        COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved_count,\n        COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_count,\n        COUNT(CASE WHEN status = 'needs_review' THEN 1 END) as needs_review_count,\n        MAX(created_at) as last_submission,\n        COUNT(CASE WHEN input_type = 'image' THEN 1 END) as image_submissions,\n        COUNT(CASE WHEN input_type = 'url' THEN 1 END) as url_submissions\n      FROM submissions \n      WHERE user_id = ?\n    `);\n    \n    return stmt.get(userId);\n  },\n  \n  // Database maintenance\n  cleanup() {\n    db.prepare('DELETE FROM submissions WHERE created_at < datetime(\"now\", \"-90 days\")').run();\n    db.prepare('VACUUM').run();\n  },\n  \n  // Close database connection\n  close() {\n    db.close();\n  }\n};\n\n// Initialize database on module load\ninitializeDatabase();\n\nmodule.exports = {\n  db,\n  operations,\n  initializeDatabase\n};","size_bytes":9571}},"version":1}